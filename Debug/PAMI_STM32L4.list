
PAMI_STM32L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007640  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080077c8  080077c8  000087c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007810  08007810  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007810  08007810  00008810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007818  08007818  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007818  08007818  00008818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800781c  0800781c  0000881c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007820  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  0800782c  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800782c  00009238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017277  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289a  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00022b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010de  00000000  00000000  000240b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002903c  00000000  00000000  0002518e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f8e  00000000  00000000  0004e1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108569  00000000  00000000  00067158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  0016f704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00175530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077b0 	.word	0x080077b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080077b0 	.word	0x080077b0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	0000      	movs	r0, r0
	...

08000c98 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM2_Init(void);

/* USER CODE BEGIN PFP */
ADC_ChannelConfTypeDef sConfig;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
  static int threshold_state, timer_count;
  if((GPIO_Pin == ECHO_PIN)&&(threshold_state==0)){
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ca8:	d10d      	bne.n	8000cc6 <HAL_GPIO_EXTI_Callback+0x2e>
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x98>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d109      	bne.n	8000cc6 <HAL_GPIO_EXTI_Callback+0x2e>
	  threshold_state =1;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x98>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
	  timer_count = __HAL_TIM_GET_COUNTER (&htim1);
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000cc2:	601a      	str	r2, [r3, #0]
	  threshold_state = 0;
	  //int time = (__HAL_TIM_GET_COUNTER (&htim1) - timer_count);
	  Distance = (__HAL_TIM_GET_COUNTER (&htim1) - timer_count)*0.034/2;
	  //__HAL_TIM_SET_COUNTER (&htim1, 0);
  }
}
 8000cc4:	e02c      	b.n	8000d20 <HAL_GPIO_EXTI_Callback+0x88>
  }else if((GPIO_Pin==ECHO_PIN) && (threshold_state ==1)){
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ccc:	d128      	bne.n	8000d20 <HAL_GPIO_EXTI_Callback+0x88>
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x98>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d124      	bne.n	8000d20 <HAL_GPIO_EXTI_Callback+0x88>
	  threshold_state = 0;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
	  Distance = (__HAL_TIM_GET_COUNTER (&htim1) - timer_count)*0.034/2;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce2:	4a15      	ldr	r2, [pc, #84]	@ (8000d38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fbaf 	bl	800044c <__aeabi_ui2d>
 8000cee:	a30e      	add	r3, pc, #56	@ (adr r3, 8000d28 <HAL_GPIO_EXTI_Callback+0x90>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fc24 	bl	8000540 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d08:	f7ff fd44 	bl	8000794 <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fe26 	bl	8000964 <__aeabi_d2uiz>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d1e:	801a      	strh	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	b020c49c 	.word	0xb020c49c
 8000d2c:	3fa16872 	.word	0x3fa16872
 8000d30:	2000022c 	.word	0x2000022c
 8000d34:	200000e0 	.word	0x200000e0
 8000d38:	20000230 	.word	0x20000230
 8000d3c:	20000200 	.word	0x20000200

08000d40 <ADC_Select_CH1>:
  return ch;
}

// I couldn't configure the ioc file properly with DMAs, so I'm gonna just manually initialise those each time, here's the functions to do so :
// note: they're copied, slightly modified and pasted from lines 382-409 down this file
void ADC_Select_CH1(void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
	  */
	sConfig.Channel = ADC_CHANNEL_5;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d46:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <ADC_Select_CH1+0x44>)
 8000d48:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d52:	2206      	movs	r2, #6
 8000d54:	609a      	str	r2, [r3, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d58:	227f      	movs	r2, #127	@ 0x7f
 8000d5a:	60da      	str	r2, [r3, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	611a      	str	r2, [r3, #16]
	sConfig.Offset = 0;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d68:	4905      	ldr	r1, [pc, #20]	@ (8000d80 <ADC_Select_CH1+0x40>)
 8000d6a:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <ADC_Select_CH1+0x48>)
 8000d6c:	f001 ff54 	bl	8002c18 <HAL_ADC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <ADC_Select_CH1+0x3a>
	{
	  Error_Handler();
 8000d76:	f000 fcb9 	bl	80016ec <Error_Handler>
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000204 	.word	0x20000204
 8000d84:	14f00020 	.word	0x14f00020
 8000d88:	20000028 	.word	0x20000028

08000d8c <ADC_Select_CH2>:
void ADC_Select_CH2(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <ADC_Select_CH2+0x44>)
 8000d94:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000d9e:	2206      	movs	r2, #6
 8000da0:	609a      	str	r2, [r3, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000da4:	227f      	movs	r2, #127	@ 0x7f
 8000da6:	60da      	str	r2, [r3, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000daa:	2204      	movs	r2, #4
 8000dac:	611a      	str	r2, [r3, #16]
	  sConfig.Offset = 0;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	4905      	ldr	r1, [pc, #20]	@ (8000dcc <ADC_Select_CH2+0x40>)
 8000db6:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <ADC_Select_CH2+0x48>)
 8000db8:	f001 ff2e 	bl	8002c18 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <ADC_Select_CH2+0x3a>
	  {
	    Error_Handler();
 8000dc2:	f000 fc93 	bl	80016ec <Error_Handler>
	  }
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000204 	.word	0x20000204
 8000dd0:	2e300800 	.word	0x2e300800
 8000dd4:	20000028 	.word	0x20000028

08000dd8 <ADC_Select_CH3>:

void ADC_Select_CH3(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
		  */
		  sConfig.Channel = ADC_CHANNEL_12;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000dde:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <ADC_Select_CH3+0x44>)
 8000de0:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000dea:	2206      	movs	r2, #6
 8000dec:	609a      	str	r2, [r3, #8]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000df0:	227f      	movs	r2, #127	@ 0x7f
 8000df2:	60da      	str	r2, [r3, #12]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	611a      	str	r2, [r3, #16]
		  sConfig.Offset = 0;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e00:	4905      	ldr	r1, [pc, #20]	@ (8000e18 <ADC_Select_CH3+0x40>)
 8000e02:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <ADC_Select_CH3+0x48>)
 8000e04:	f001 ff08 	bl	8002c18 <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <ADC_Select_CH3+0x3a>
		  {
		    Error_Handler();
 8000e0e:	f000 fc6d 	bl	80016ec <Error_Handler>
		  }
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000204 	.word	0x20000204
 8000e1c:	32601000 	.word	0x32601000
 8000e20:	20000028 	.word	0x20000028

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2a:	f000 feb5 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2e:	f000 f9b7 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e32:	f000 fbc5 	bl	80015c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e36:	f000 fb93 	bl	8001560 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e3a:	f000 fa03 	bl	8001244 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e3e:	f000 fa97 	bl	8001370 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e42:	f000 fad5 	bl	80013f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e46:	f000 fb27 	bl	8001498 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e4a:	4880      	ldr	r0, [pc, #512]	@ (800104c <main+0x228>)
 8000e4c:	f004 fda2 	bl	8005994 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //pull the TRIG pin low
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5a:	f003 f8c1 	bl	8003fe0 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //for sensors calibration
 8000e5e:	217f      	movs	r1, #127	@ 0x7f
 8000e60:	487b      	ldr	r0, [pc, #492]	@ (8001050 <main+0x22c>)
 8000e62:	f002 fcbf 	bl	80037e4 <HAL_ADCEx_Calibration_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 8000e66:	2108      	movs	r1, #8
 8000e68:	487a      	ldr	r0, [pc, #488]	@ (8001054 <main+0x230>)
 8000e6a:	f004 fe53 	bl	8005b14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 8000e6e:	210c      	movs	r1, #12
 8000e70:	4878      	ldr	r0, [pc, #480]	@ (8001054 <main+0x230>)
 8000e72:	f004 fe4f 	bl	8005b14 <HAL_TIM_PWM_Start>

  int threshold = 500;  //the threshold for line tracking
 8000e76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e7a:	60bb      	str	r3, [r7, #8]
  //Stop the motor
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4875      	ldr	r0, [pc, #468]	@ (8001058 <main+0x234>)
 8000e82:	f003 f8ad 	bl	8003fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4873      	ldr	r0, [pc, #460]	@ (8001058 <main+0x234>)
 8000e8c:	f003 f8a8 	bl	8003fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e96:	4870      	ldr	r0, [pc, #448]	@ (8001058 <main+0x234>)
 8000e98:	f003 f8a2 	bl	8003fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea2:	486d      	ldr	r0, [pc, #436]	@ (8001058 <main+0x234>)
 8000ea4:	f003 f89c 	bl	8003fe0 <HAL_GPIO_WritePin>

  int count_time_init =0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  int count_time_actu =0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // The code for the radar, it prints the distance
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f003 f891 	bl	8003fe0 <HAL_GPIO_WritePin>
	  //__HAL_TIM_SET_COUNTER(&htim1, 0);
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000ebe:	bf00      	nop
 8000ec0:	4b62      	ldr	r3, [pc, #392]	@ (800104c <main+0x228>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d9fa      	bls.n	8000ec0 <main+0x9c>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f003 f884 	bl	8003fe0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800104c <main+0x228>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24


	  //Lign tracker part
	  ADC_Select_CH1();
 8000ee0:	f7ff ff2e 	bl	8000d40 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8000ee4:	485a      	ldr	r0, [pc, #360]	@ (8001050 <main+0x22c>)
 8000ee6:	f001 fa8b 	bl	8002400 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000eea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eee:	4858      	ldr	r0, [pc, #352]	@ (8001050 <main+0x22c>)
 8000ef0:	f001 fb74 	bl	80025dc <HAL_ADC_PollForConversion>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 8000ef4:	4856      	ldr	r0, [pc, #344]	@ (8001050 <main+0x22c>)
 8000ef6:	f001 fc49 	bl	800278c <HAL_ADC_GetValue>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b57      	ldr	r3, [pc, #348]	@ (800105c <main+0x238>)
 8000f00:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000f02:	4853      	ldr	r0, [pc, #332]	@ (8001050 <main+0x22c>)
 8000f04:	f001 fb36 	bl	8002574 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 8000f08:	f7ff ff40 	bl	8000d8c <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 8000f0c:	4850      	ldr	r0, [pc, #320]	@ (8001050 <main+0x22c>)
 8000f0e:	f001 fa77 	bl	8002400 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f16:	484e      	ldr	r0, [pc, #312]	@ (8001050 <main+0x22c>)
 8000f18:	f001 fb60 	bl	80025dc <HAL_ADC_PollForConversion>
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8000f1c:	484c      	ldr	r0, [pc, #304]	@ (8001050 <main+0x22c>)
 8000f1e:	f001 fc35 	bl	800278c <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b4d      	ldr	r3, [pc, #308]	@ (800105c <main+0x238>)
 8000f28:	805a      	strh	r2, [r3, #2]
	  HAL_ADC_Stop(&hadc1);
 8000f2a:	4849      	ldr	r0, [pc, #292]	@ (8001050 <main+0x22c>)
 8000f2c:	f001 fb22 	bl	8002574 <HAL_ADC_Stop>

	  ADC_Select_CH3();
 8000f30:	f7ff ff52 	bl	8000dd8 <ADC_Select_CH3>
	  HAL_ADC_Start(&hadc1);
 8000f34:	4846      	ldr	r0, [pc, #280]	@ (8001050 <main+0x22c>)
 8000f36:	f001 fa63 	bl	8002400 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f3a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f3e:	4844      	ldr	r0, [pc, #272]	@ (8001050 <main+0x22c>)
 8000f40:	f001 fb4c 	bl	80025dc <HAL_ADC_PollForConversion>
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000f44:	4842      	ldr	r0, [pc, #264]	@ (8001050 <main+0x22c>)
 8000f46:	f001 fc21 	bl	800278c <HAL_ADC_GetValue>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b43      	ldr	r3, [pc, #268]	@ (800105c <main+0x238>)
 8000f50:	809a      	strh	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 8000f52:	483f      	ldr	r0, [pc, #252]	@ (8001050 <main+0x22c>)
 8000f54:	f001 fb0e 	bl	8002574 <HAL_ADC_Stop>
	  //printf("Left : %d, Mid: %d, Right: %d \r\n", ADC_VAL[0], ADC_VAL[1], ADC_VAL[2]);

	  if(((ADC_VAL[0]<threshold) &&(ADC_VAL[1]>threshold) && (ADC_VAL[2]<threshold))&&(Distance>10)){
 8000f58:	4b40      	ldr	r3, [pc, #256]	@ (800105c <main+0x238>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4293      	cmp	r3, r2
 8000f62:	dd3e      	ble.n	8000fe2 <main+0x1be>
 8000f64:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <main+0x238>)
 8000f66:	885b      	ldrh	r3, [r3, #2]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	da38      	bge.n	8000fe2 <main+0x1be>
 8000f70:	4b3a      	ldr	r3, [pc, #232]	@ (800105c <main+0x238>)
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	dd32      	ble.n	8000fe2 <main+0x1be>
 8000f7c:	4b38      	ldr	r3, [pc, #224]	@ (8001060 <main+0x23c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d92e      	bls.n	8000fe2 <main+0x1be>
		  //Set the rotation direction forward
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	4833      	ldr	r0, [pc, #204]	@ (8001058 <main+0x234>)
 8000f8a:	f003 f829 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2120      	movs	r1, #32
 8000f92:	4831      	ldr	r0, [pc, #196]	@ (8001058 <main+0x234>)
 8000f94:	f003 f824 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f9e:	482e      	ldr	r0, [pc, #184]	@ (8001058 <main+0x234>)
 8000fa0:	f003 f81e 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000faa:	482b      	ldr	r0, [pc, #172]	@ (8001058 <main+0x234>)
 8000fac:	f003 f818 	bl	8003fe0 <HAL_GPIO_WritePin>
		  // Set the speed
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1500);
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <main+0x230>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1400);
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <main+0x230>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40
		  count_time_actu =HAL_GetTick();
 8000fc4:	f000 fe58 	bl	8001c78 <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	607b      	str	r3, [r7, #4]
		  count_time_init =HAL_GetTick();
 8000fcc:	f000 fe54 	bl	8001c78 <HAL_GetTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60fb      	str	r3, [r7, #12]
		  started_to_turn_right = 0;
 8000fd4:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <main+0x240>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
		  started_to_turn_left = 0;
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <main+0x244>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e078      	b.n	80010d4 <main+0x2b0>
	  }else if(( (ADC_VAL[0]>threshold)&&(Distance>10)) || (started_to_turn_left==1)){
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <main+0x238>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4293      	cmp	r3, r2
 8000fec:	da03      	bge.n	8000ff6 <main+0x1d2>
 8000fee:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <main+0x23c>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d803      	bhi.n	8000ffe <main+0x1da>
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <main+0x244>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d136      	bne.n	800106c <main+0x248>
		  //Stop the left motor
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2110      	movs	r1, #16
 8001002:	4815      	ldr	r0, [pc, #84]	@ (8001058 <main+0x234>)
 8001004:	f002 ffec 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2120      	movs	r1, #32
 800100c:	4812      	ldr	r0, [pc, #72]	@ (8001058 <main+0x234>)
 800100e:	f002 ffe7 	bl	8003fe0 <HAL_GPIO_WritePin>
		  //right motor rotate foward
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001018:	480f      	ldr	r0, [pc, #60]	@ (8001058 <main+0x234>)
 800101a:	f002 ffe1 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0); //modif
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <main+0x234>)
 8001026:	f002 ffdb 	bl	8003fe0 <HAL_GPIO_WritePin>
		  // Set the speed

		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 1000);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <main+0x230>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001032:	641a      	str	r2, [r3, #64]	@ 0x40
		  count_time_actu =HAL_GetTick();
 8001034:	f000 fe20 	bl	8001c78 <HAL_GetTick>
 8001038:	4603      	mov	r3, r0
 800103a:	607b      	str	r3, [r7, #4]
		  count_time_init =HAL_GetTick();
 800103c:	f000 fe1c 	bl	8001c78 <HAL_GetTick>
 8001040:	4603      	mov	r3, r0
 8001042:	60fb      	str	r3, [r7, #12]
		  started_to_turn_left = 1;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <main+0x244>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e043      	b.n	80010d4 <main+0x2b0>
 800104c:	200000e0 	.word	0x200000e0
 8001050:	20000028 	.word	0x20000028
 8001054:	2000012c 	.word	0x2000012c
 8001058:	48000400 	.word	0x48000400
 800105c:	2000021c 	.word	0x2000021c
 8001060:	20000200 	.word	0x20000200
 8001064:	20000224 	.word	0x20000224
 8001068:	20000228 	.word	0x20000228
	  }else if(((ADC_VAL[2]>threshold)&&(Distance>10))|| (started_to_turn_right==1)){
 800106c:	4b47      	ldr	r3, [pc, #284]	@ (800118c <main+0x368>)
 800106e:	889b      	ldrh	r3, [r3, #4]
 8001070:	461a      	mov	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4293      	cmp	r3, r2
 8001076:	da03      	bge.n	8001080 <main+0x25c>
 8001078:	4b45      	ldr	r3, [pc, #276]	@ (8001190 <main+0x36c>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b0a      	cmp	r3, #10
 800107e:	d803      	bhi.n	8001088 <main+0x264>
 8001080:	4b44      	ldr	r3, [pc, #272]	@ (8001194 <main+0x370>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d125      	bne.n	80010d4 <main+0x2b0>
		  //left motor rotate foward
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  //modif
 8001088:	2200      	movs	r2, #0
 800108a:	2110      	movs	r1, #16
 800108c:	4842      	ldr	r0, [pc, #264]	@ (8001198 <main+0x374>)
 800108e:	f002 ffa7 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	4840      	ldr	r0, [pc, #256]	@ (8001198 <main+0x374>)
 8001098:	f002 ffa2 	bl	8003fe0 <HAL_GPIO_WritePin>
		  //Stop the right motor
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a2:	483d      	ldr	r0, [pc, #244]	@ (8001198 <main+0x374>)
 80010a4:	f002 ff9c 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ae:	483a      	ldr	r0, [pc, #232]	@ (8001198 <main+0x374>)
 80010b0:	f002 ff96 	bl	8003fe0 <HAL_GPIO_WritePin>
		  // Set the speed
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1000);
 80010b4:	4b39      	ldr	r3, [pc, #228]	@ (800119c <main+0x378>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010bc:	63da      	str	r2, [r3, #60]	@ 0x3c

		  count_time_actu =HAL_GetTick();
 80010be:	f000 fddb 	bl	8001c78 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	607b      	str	r3, [r7, #4]
		  count_time_init =HAL_GetTick();
 80010c6:	f000 fdd7 	bl	8001c78 <HAL_GetTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
		  started_to_turn_right = 1;
 80010ce:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <main+0x370>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
	  }
	  if(Distance<10){
 80010d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <main+0x36c>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d81d      	bhi.n	8001118 <main+0x2f4>
		  //Stop both motors
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	482d      	ldr	r0, [pc, #180]	@ (8001198 <main+0x374>)
 80010e2:	f002 ff7d 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	482b      	ldr	r0, [pc, #172]	@ (8001198 <main+0x374>)
 80010ec:	f002 ff78 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f6:	4828      	ldr	r0, [pc, #160]	@ (8001198 <main+0x374>)
 80010f8:	f002 ff72 	bl	8003fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001102:	4825      	ldr	r0, [pc, #148]	@ (8001198 <main+0x374>)
 8001104:	f002 ff6c 	bl	8003fe0 <HAL_GPIO_WritePin>
		  count_time_actu =HAL_GetTick();
 8001108:	f000 fdb6 	bl	8001c78 <HAL_GetTick>
 800110c:	4603      	mov	r3, r0
 800110e:	607b      	str	r3, [r7, #4]
		  count_time_init =HAL_GetTick();
 8001110:	f000 fdb2 	bl	8001c78 <HAL_GetTick>
 8001114:	4603      	mov	r3, r0
 8001116:	60fb      	str	r3, [r7, #12]
	  }
	  if(((ADC_VAL[0]<threshold) &&(ADC_VAL[1]<threshold) && (ADC_VAL[2]<threshold))){
 8001118:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <main+0x368>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	4293      	cmp	r3, r2
 8001122:	dd2f      	ble.n	8001184 <main+0x360>
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <main+0x368>)
 8001126:	885b      	ldrh	r3, [r3, #2]
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4293      	cmp	r3, r2
 800112e:	dd29      	ble.n	8001184 <main+0x360>
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <main+0x368>)
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	461a      	mov	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4293      	cmp	r3, r2
 800113a:	dd23      	ble.n	8001184 <main+0x360>
	  		  //Set the rotation direction forward
		  	  count_time_actu = HAL_GetTick();
 800113c:	f000 fd9c 	bl	8001c78 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	607b      	str	r3, [r7, #4]
	  		  //if((count_time_actu-count_time_init) !=0){count_time_init =count_time_actu;}
	  		  //printf("count_time_init-HAL_GetTick() = %d \r\n",(count_time_actu-count_time_init));
	  		  if (HAL_GetTick()-count_time_init >800 ){
 8001144:	f000 fd98 	bl	8001c78 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001152:	d917      	bls.n	8001184 <main+0x360>
	  			//Stop both motors
	  			  	  	  //printf("jarrrettee \r\n");
	  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	480f      	ldr	r0, [pc, #60]	@ (8001198 <main+0x374>)
 800115a:	f002 ff41 	bl	8003fe0 <HAL_GPIO_WritePin>
	  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <main+0x374>)
 8001164:	f002 ff3c 	bl	8003fe0 <HAL_GPIO_WritePin>
	  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <main+0x374>)
 8001170:	f002 ff36 	bl	8003fe0 <HAL_GPIO_WritePin>
	  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117a:	4807      	ldr	r0, [pc, #28]	@ (8001198 <main+0x374>)
 800117c:	f002 ff30 	bl	8003fe0 <HAL_GPIO_WritePin>
	  					  count_time_init = count_time_actu;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	60fb      	str	r3, [r7, #12]
	  		  }
	  }


	  HAL_Delay(5); //If I don't add this the detection with ultrasound might cause pb with relatively long ditances
 8001184:	2005      	movs	r0, #5
 8001186:	f000 fd83 	bl	8001c90 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800118a:	e691      	b.n	8000eb0 <main+0x8c>
 800118c:	2000021c 	.word	0x2000021c
 8001190:	20000200 	.word	0x20000200
 8001194:	20000224 	.word	0x20000224
 8001198:	48000400 	.word	0x48000400
 800119c:	2000012c 	.word	0x2000012c

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	@ 0x58
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2244      	movs	r2, #68	@ 0x44
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 fad1 	bl	8007756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011c6:	f003 f87b 	bl	80042c0 <HAL_PWREx_ControlVoltageScaling>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011d0:	f000 fa8c 	bl	80016ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011de:	2310      	movs	r3, #16
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	2302      	movs	r3, #2
 80011e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ee:	230a      	movs	r3, #10
 80011f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011f2:	2307      	movs	r3, #7
 80011f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f8b2 	bl	800436c <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800120e:	f000 fa6d 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2303      	movs	r3, #3
 8001218:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	2104      	movs	r1, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fc7a 	bl	8004b24 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001236:	f000 fa59 	bl	80016ec <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3758      	adds	r7, #88	@ 0x58
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <MX_ADC1_Init+0x118>)
 8001268:	4a3d      	ldr	r2, [pc, #244]	@ (8001360 <MX_ADC1_Init+0x11c>)
 800126a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800126c:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <MX_ADC1_Init+0x118>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001272:	4b3a      	ldr	r3, [pc, #232]	@ (800135c <MX_ADC1_Init+0x118>)
 8001274:	2208      	movs	r2, #8
 8001276:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001278:	4b38      	ldr	r3, [pc, #224]	@ (800135c <MX_ADC1_Init+0x118>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800127e:	4b37      	ldr	r3, [pc, #220]	@ (800135c <MX_ADC1_Init+0x118>)
 8001280:	2201      	movs	r2, #1
 8001282:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001284:	4b35      	ldr	r3, [pc, #212]	@ (800135c <MX_ADC1_Init+0x118>)
 8001286:	2204      	movs	r2, #4
 8001288:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800128a:	4b34      	ldr	r3, [pc, #208]	@ (800135c <MX_ADC1_Init+0x118>)
 800128c:	2200      	movs	r2, #0
 800128e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001290:	4b32      	ldr	r3, [pc, #200]	@ (800135c <MX_ADC1_Init+0x118>)
 8001292:	2201      	movs	r2, #1
 8001294:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <MX_ADC1_Init+0x118>)
 8001298:	2203      	movs	r2, #3
 800129a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <MX_ADC1_Init+0x118>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <MX_ADC1_Init+0x118>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <MX_ADC1_Init+0x118>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <MX_ADC1_Init+0x118>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b8:	4b28      	ldr	r3, [pc, #160]	@ (800135c <MX_ADC1_Init+0x118>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012be:	4b27      	ldr	r3, [pc, #156]	@ (800135c <MX_ADC1_Init+0x118>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	4825      	ldr	r0, [pc, #148]	@ (800135c <MX_ADC1_Init+0x118>)
 80012c8:	f000 ff4a 	bl	8002160 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012d2:	f000 fa0b 	bl	80016ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	481e      	ldr	r0, [pc, #120]	@ (800135c <MX_ADC1_Init+0x118>)
 80012e2:	f002 fb11 	bl	8003908 <HAL_ADCEx_MultiModeConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012ec:	f000 f9fe 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <MX_ADC1_Init+0x120>)
 80012f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f4:	2306      	movs	r3, #6
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80012f8:	2306      	movs	r3, #6
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012fc:	237f      	movs	r3, #127	@ 0x7f
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001300:	2304      	movs	r3, #4
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	@ (800135c <MX_ADC1_Init+0x118>)
 800130e:	f001 fc83 	bl	8002c18 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001318:	f000 f9e8 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_ADC1_Init+0x124>)
 800131e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001320:	230c      	movs	r3, #12
 8001322:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <MX_ADC1_Init+0x118>)
 800132a:	f001 fc75 	bl	8002c18 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001334:	f000 f9da 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_ADC1_Init+0x128>)
 800133a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800133c:	2312      	movs	r3, #18
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_ADC1_Init+0x118>)
 8001346:	f001 fc67 	bl	8002c18 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001350:	f000 f9cc 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	@ 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000028 	.word	0x20000028
 8001360:	50040000 	.word	0x50040000
 8001364:	14f00020 	.word	0x14f00020
 8001368:	2e300800 	.word	0x2e300800
 800136c:	32601000 	.word	0x32601000

08001370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <MX_I2C1_Init+0x78>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_I2C1_Init+0x74>)
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <MX_I2C1_Init+0x7c>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_I2C1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_I2C1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013ac:	f002 fe48 	bl	8004040 <HAL_I2C_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013b6:	f000 f999 	bl	80016ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013be:	f002 feda 	bl	8004176 <HAL_I2CEx_ConfigAnalogFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013c8:	f000 f990 	bl	80016ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_I2C1_Init+0x74>)
 80013d0:	f002 ff1c 	bl	800420c <HAL_I2CEx_ConfigDigitalFilter>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 f987 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000008c 	.word	0x2000008c
 80013e8:	40005400 	.word	0x40005400
 80013ec:	00f12981 	.word	0x00f12981

080013f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001410:	4a20      	ldr	r2, [pc, #128]	@ (8001494 <MX_TIM1_Init+0xa4>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001416:	224f      	movs	r2, #79	@ 0x4f
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <MX_TIM1_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <MX_TIM1_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <MX_TIM1_Init+0xa0>)
 800143c:	f004 fa52 	bl	80058e4 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001446:	f000 f951 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001458:	f004 fe7e 	bl	8006158 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001462:	f000 f943 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	@ (8001490 <MX_TIM1_Init+0xa0>)
 8001478:	f005 fba6 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001482:	f000 f933 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000e0 	.word	0x200000e0
 8001494:	40012c00 	.word	0x40012c00

08001498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014c6:	224f      	movs	r2, #79	@ 0x4f
 80014c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014d2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014e4:	481d      	ldr	r0, [pc, #116]	@ (800155c <MX_TIM2_Init+0xc4>)
 80014e6:	f004 fabd 	bl	8005a64 <HAL_TIM_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f000 f8fc 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014f4:	2320      	movs	r3, #32
 80014f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4816      	ldr	r0, [pc, #88]	@ (800155c <MX_TIM2_Init+0xc4>)
 8001504:	f005 fb60 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800150e:	f000 f8ed 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	@ 0x60
 8001514:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2208      	movs	r2, #8
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <MX_TIM2_Init+0xc4>)
 800152a:	f004 fd01 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001534:	f000 f8da 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	220c      	movs	r2, #12
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM2_Init+0xc4>)
 8001540:	f004 fcf6 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800154a:	f000 f8cf 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM2_Init+0xc4>)
 8001550:	f000 fa08 	bl	8001964 <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	@ 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000012c 	.word	0x2000012c

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <MX_USART2_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART2_UART_Init+0x58>)
 80015a4:	f005 fbb6 	bl	8006d14 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f89d 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000178 	.word	0x20000178
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b42      	ldr	r3, [pc, #264]	@ (80016e0 <MX_GPIO_Init+0x120>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a41      	ldr	r2, [pc, #260]	@ (80016e0 <MX_GPIO_Init+0x120>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b3f      	ldr	r3, [pc, #252]	@ (80016e0 <MX_GPIO_Init+0x120>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <MX_GPIO_Init+0x120>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a3b      	ldr	r2, [pc, #236]	@ (80016e0 <MX_GPIO_Init+0x120>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <MX_GPIO_Init+0x120>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <MX_GPIO_Init+0x120>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a35      	ldr	r2, [pc, #212]	@ (80016e0 <MX_GPIO_Init+0x120>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <MX_GPIO_Init+0x120>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b30      	ldr	r3, [pc, #192]	@ (80016e0 <MX_GPIO_Init+0x120>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	4a2f      	ldr	r2, [pc, #188]	@ (80016e0 <MX_GPIO_Init+0x120>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162a:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <MX_GPIO_Init+0x120>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800163c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001640:	f002 fcce 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_Pin|IN1_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 714c 	mov.w	r1, #816	@ 0x330
 800164a:	4826      	ldr	r0, [pc, #152]	@ (80016e4 <MX_GPIO_Init+0x124>)
 800164c:	f002 fcc8 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001656:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4820      	ldr	r0, [pc, #128]	@ (80016e8 <MX_GPIO_Init+0x128>)
 8001668:	f002 fb10 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800166c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001688:	f002 fb00 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001692:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f002 faf1 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin|IN4_Pin|IN3_Pin;
 80016aa:	f44f 734c 	mov.w	r3, #816	@ 0x330
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <MX_GPIO_Init+0x124>)
 80016c4:	f002 fae2 	bl	8003c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2017      	movs	r0, #23
 80016ce:	f002 faa6 	bl	8003c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016d2:	2017      	movs	r0, #23
 80016d4:	f002 fabf 	bl	8003c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	@ 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <Error_Handler+0x8>

080016f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_MspInit+0x44>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	4a0e      	ldr	r2, [pc, #56]	@ (800173c <HAL_MspInit+0x44>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6613      	str	r3, [r2, #96]	@ 0x60
 800170a:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <HAL_MspInit+0x44>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <HAL_MspInit+0x44>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	4a08      	ldr	r2, [pc, #32]	@ (800173c <HAL_MspInit+0x44>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001720:	6593      	str	r3, [r2, #88]	@ 0x58
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_MspInit+0x44>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ac      	sub	sp, #176	@ 0xb0
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2288      	movs	r2, #136	@ 0x88
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f005 fff8 	bl	8007756 <memset>
  if(hadc->Instance==ADC1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_ADC_MspInit+0xd8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d14f      	bne.n	8001810 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001770:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001774:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001776:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800177a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001786:	2308      	movs	r3, #8
 8001788:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800178a:	2307      	movs	r3, #7
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001792:	2302      	movs	r3, #2
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001796:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fbe3 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017ac:	f7ff ff9e 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_ADC_MspInit+0xdc>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_ADC_MspInit+0xdc>)
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_ADC_MspInit+0xdc>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_ADC_MspInit+0xdc>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	4a13      	ldr	r2, [pc, #76]	@ (800181c <HAL_ADC_MspInit+0xdc>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_ADC_MspInit+0xdc>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SENSOR_L_Pin|SENSOR_M_Pin|SENSOR_R_Pin;
 80017e0:	23c1      	movs	r3, #193	@ 0xc1
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017e6:	230b      	movs	r3, #11
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f002 fa46 	bl	8003c8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2101      	movs	r1, #1
 8001804:	2012      	movs	r0, #18
 8001806:	f002 fa0a 	bl	8003c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800180a:	2012      	movs	r0, #18
 800180c:	f002 fa23 	bl	8003c56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001810:	bf00      	nop
 8001812:	37b0      	adds	r7, #176	@ 0xb0
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	50040000 	.word	0x50040000
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0ac      	sub	sp, #176	@ 0xb0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2288      	movs	r2, #136	@ 0x88
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f005 ff88 	bl	8007756 <memset>
  if(hi2c->Instance==I2C1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <HAL_I2C_MspInit+0xb0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d13a      	bne.n	80018c6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001854:	2300      	movs	r3, #0
 8001856:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fb85 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001868:	f7ff ff40 	bl	80016ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_I2C_MspInit+0xb4>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001870:	4a18      	ldr	r2, [pc, #96]	@ (80018d4 <HAL_I2C_MspInit+0xb4>)
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <HAL_I2C_MspInit+0xb4>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001884:	23c0      	movs	r3, #192	@ 0xc0
 8001886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188a:	2312      	movs	r3, #18
 800188c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189c:	2304      	movs	r3, #4
 800189e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018a6:	4619      	mov	r1, r3
 80018a8:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <HAL_I2C_MspInit+0xb8>)
 80018aa:	f002 f9ef 	bl	8003c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_I2C_MspInit+0xb4>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_I2C_MspInit+0xb4>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_I2C_MspInit+0xb4>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018c6:	bf00      	nop
 80018c8:	37b0      	adds	r7, #176	@ 0xb0
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000400 	.word	0x48000400

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <HAL_TIM_Base_MspInit+0x38>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	4a09      	ldr	r2, [pc, #36]	@ (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <HAL_TIM_Base_MspInit+0x3c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192c:	d113      	bne.n	8001956 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_TIM_PWM_MspInit+0x44>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_TIM_PWM_MspInit+0x44>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_TIM_PWM_MspInit+0x44>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	201c      	movs	r0, #28
 800194c:	f002 f967 	bl	8003c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001950:	201c      	movs	r0, #28
 8001952:	f002 f980 	bl	8003c56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001984:	d11c      	bne.n	80019c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <HAL_TIM_MspPostInit+0x64>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <HAL_TIM_MspPostInit+0x64>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_TIM_MspPostInit+0x64>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 800199e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	4804      	ldr	r0, [pc, #16]	@ (80019cc <HAL_TIM_MspPostInit+0x68>)
 80019bc:	f002 f966 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0ac      	sub	sp, #176	@ 0xb0
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2288      	movs	r2, #136	@ 0x88
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 feb0 	bl	8007756 <memset>
  if(huart->Instance==USART2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a21      	ldr	r2, [pc, #132]	@ (8001a80 <HAL_UART_MspInit+0xb0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d13b      	bne.n	8001a78 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 faad 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a18:	f7ff fe68 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_UART_MspInit+0xb4>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_UART_MspInit+0xb4>)
 8001a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a28:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_UART_MspInit+0xb4>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_UART_MspInit+0xb4>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <HAL_UART_MspInit+0xb4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a40:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_UART_MspInit+0xb4>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a64:	2307      	movs	r3, #7
 8001a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a74:	f002 f90a 	bl	8003c8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a78:	bf00      	nop
 8001a7a:	37b0      	adds	r7, #176	@ 0xb0
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40004400 	.word	0x40004400
 8001a84:	40021000 	.word	0x40021000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <NMI_Handler+0x4>

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <UsageFault_Handler+0x4>

08001ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f000 f8b7 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <ADC1_2_IRQHandler+0x10>)
 8001aee:	f000 fe5b 	bl	80027a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000028 	.word	0x20000028

08001afc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b04:	f002 fa84 	bl	8004010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <TIM2_IRQHandler+0x10>)
 8001b12:	f004 f905 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000012c 	.word	0x2000012c

08001b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b48:	f7ff ffea 	bl	8001b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4e:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <LoopForever+0xe>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b54:	e002      	b.n	8001b5c <LoopCopyDataInit>

08001b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5a:	3304      	adds	r3, #4

08001b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b60:	d3f9      	bcc.n	8001b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b64:	4c0a      	ldr	r4, [pc, #40]	@ (8001b90 <LoopForever+0x16>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b68:	e001      	b.n	8001b6e <LoopFillZerobss>

08001b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b6c:	3204      	adds	r2, #4

08001b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b70:	d3fb      	bcc.n	8001b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b72:	f005 fdf9 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b76:	f7ff f955 	bl	8000e24 <main>

08001b7a <LoopForever>:

LoopForever:
    b LoopForever
 8001b7a:	e7fe      	b.n	8001b7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b88:	08007820 	.word	0x08007820
  ldr r2, =_sbss
 8001b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b90:	20000238 	.word	0x20000238

08001b94 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC3_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_Init+0x3c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_Init+0x3c>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f002 f82a 	bl	8003c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f000 f80f 	bl	8001bd8 <HAL_InitTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	e001      	b.n	8001bca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bc6:	f7ff fd97 	bl	80016f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bca:	79fb      	ldrb	r3, [r7, #7]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <HAL_InitTick+0x6c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_InitTick+0x70>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_InitTick+0x6c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 f835 	bl	8003c72 <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d809      	bhi.n	8001c28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f001 ffff 	bl	8003c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c20:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_InitTick+0x74>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e007      	b.n	8001c38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e004      	b.n	8001c38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e001      	b.n	8001c38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000234 	.word	0x20000234

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000234 	.word	0x20000234

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3360      	adds	r3, #96	@ 0x60
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <LL_ADC_SetOffset+0x44>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	03fff000 	.word	0x03fff000

08001d88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3360      	adds	r3, #96	@ 0x60
 8001d96:	461a      	mov	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3360      	adds	r3, #96	@ 0x60
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3330      	adds	r3, #48	@ 0x30
 8001e20:	461a      	mov	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	4413      	add	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	211f      	movs	r1, #31
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0e9b      	lsrs	r3, r3, #26
 8001e48:	f003 011f 	and.w	r1, r3, #31
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	431a      	orrs	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e74:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b087      	sub	sp, #28
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3314      	adds	r3, #20
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0e5b      	lsrs	r3, r3, #25
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0d1b      	lsrs	r3, r3, #20
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2107      	movs	r1, #7
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	0d1b      	lsrs	r3, r3, #20
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0318 	and.w	r3, r3, #24
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f08:	40d9      	lsrs	r1, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	0007ffff 	.word	0x0007ffff

08001f2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 031f 	and.w	r3, r3, #31
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6093      	str	r3, [r2, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fec:	d101      	bne.n	8001ff2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002038:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800203c:	f043 0202 	orr.w	r2, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <LL_ADC_IsEnabled+0x18>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_ADC_IsEnabled+0x1a>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d101      	bne.n	800208e <LL_ADC_IsDisableOngoing+0x18>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_ADC_IsDisableOngoing+0x1a>
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d101      	bne.n	8002104 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002122:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b08      	cmp	r3, #8
 800214c:	d101      	bne.n	8002152 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e130      	b.n	80023dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fad9 	bl	8001740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fef1 	bl	8001f88 <LL_ADC_IsDeepPowerDownEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fed7 	bl	8001f64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff0c 	bl	8001fd8 <LL_ADC_IsInternalRegulatorEnabled>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fef0 	bl	8001fb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021d0:	4b84      	ldr	r3, [pc, #528]	@ (80023e4 <HAL_ADC_Init+0x284>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	4a84      	ldr	r2, [pc, #528]	@ (80023e8 <HAL_ADC_Init+0x288>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	3301      	adds	r3, #1
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e4:	e002      	b.n	80021ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f9      	bne.n	80021e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff feee 	bl	8001fd8 <LL_ADC_IsInternalRegulatorEnabled>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10d      	bne.n	800221e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff62 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 8002228:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 80c9 	bne.w	80023ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80c5 	bne.w	80023ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002248:	f043 0202 	orr.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fefb 	bl	8002050 <LL_ADC_IsEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d115      	bne.n	800228c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002260:	4862      	ldr	r0, [pc, #392]	@ (80023ec <HAL_ADC_Init+0x28c>)
 8002262:	f7ff fef5 	bl	8002050 <LL_ADC_IsEnabled>
 8002266:	4604      	mov	r4, r0
 8002268:	4861      	ldr	r0, [pc, #388]	@ (80023f0 <HAL_ADC_Init+0x290>)
 800226a:	f7ff fef1 	bl	8002050 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	431c      	orrs	r4, r3
 8002272:	4860      	ldr	r0, [pc, #384]	@ (80023f4 <HAL_ADC_Init+0x294>)
 8002274:	f7ff feec 	bl	8002050 <LL_ADC_IsEnabled>
 8002278:	4603      	mov	r3, r0
 800227a:	4323      	orrs	r3, r4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4619      	mov	r1, r3
 8002286:	485c      	ldr	r0, [pc, #368]	@ (80023f8 <HAL_ADC_Init+0x298>)
 8002288:	f7ff fd26 	bl	8001cd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e5b      	ldrb	r3, [r3, #25]
 8002290:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002296:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800229c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	3b01      	subs	r3, #1
 80022c0:	045b      	lsls	r3, r3, #17
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b44      	ldr	r3, [pc, #272]	@ (80023fc <HAL_ADC_Init+0x29c>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff1c 	bl	800213a <LL_ADC_INJ_IsConversionOngoing>
 8002302:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d13d      	bne.n	8002386 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d13a      	bne.n	8002386 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002314:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800231c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800232c:	f023 0302 	bic.w	r3, r3, #2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	430b      	orrs	r3, r1
 8002338:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002340:	2b01      	cmp	r3, #1
 8002342:	d118      	bne.n	8002376 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800234e:	f023 0304 	bic.w	r3, r3, #4
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002366:	430a      	orrs	r2, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	e007      	b.n	8002386 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10c      	bne.n	80023a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	f023 010f 	bic.w	r1, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	1e5a      	subs	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a6:	e007      	b.n	80023b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 020f 	bic.w	r2, r2, #15
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f023 0303 	bic.w	r3, r3, #3
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c8:	e007      	b.n	80023da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023da:	7ffb      	ldrb	r3, [r7, #31]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3724      	adds	r7, #36	@ 0x24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	20000000 	.word	0x20000000
 80023e8:	053e2d63 	.word	0x053e2d63
 80023ec:	50040000 	.word	0x50040000
 80023f0:	50040100 	.word	0x50040100
 80023f4:	50040200 	.word	0x50040200
 80023f8:	50040300 	.word	0x50040300
 80023fc:	fff0c007 	.word	0xfff0c007

08002400 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002408:	4857      	ldr	r0, [pc, #348]	@ (8002568 <HAL_ADC_Start+0x168>)
 800240a:	f7ff fd8f 	bl	8001f2c <LL_ADC_GetMultimode>
 800240e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe69 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 809c 	bne.w	800255a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_Start+0x30>
 800242c:	2302      	movs	r3, #2
 800242e:	e097      	b.n	8002560 <HAL_ADC_Start+0x160>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 f89b 	bl	8003574 <ADC_Enable>
 800243e:	4603      	mov	r3, r0
 8002440:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8083 	bne.w	8002550 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a42      	ldr	r2, [pc, #264]	@ (800256c <HAL_ADC_Start+0x16c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d002      	beq.n	800246e <HAL_ADC_Start+0x6e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	e000      	b.n	8002470 <HAL_ADC_Start+0x70>
 800246e:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <HAL_ADC_Start+0x170>)
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4293      	cmp	r3, r2
 8002476:	d002      	beq.n	800247e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	f023 0206 	bic.w	r2, r3, #6
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a4:	e002      	b.n	80024ac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	221c      	movs	r2, #28
 80024b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2a      	ldr	r2, [pc, #168]	@ (800256c <HAL_ADC_Start+0x16c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d002      	beq.n	80024cc <HAL_ADC_Start+0xcc>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e000      	b.n	80024ce <HAL_ADC_Start+0xce>
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_ADC_Start+0x170>)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d008      	beq.n	80024e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d002      	beq.n	80024e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d114      	bne.n	8002512 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fdc6 	bl	800209c <LL_ADC_REG_StartConversion>
 8002510:	e025      	b.n	800255e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <HAL_ADC_Start+0x16c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d002      	beq.n	800252e <HAL_ADC_Start+0x12e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e000      	b.n	8002530 <HAL_ADC_Start+0x130>
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_ADC_Start+0x170>)
 8002530:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00f      	beq.n	800255e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002546:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
 800254e:	e006      	b.n	800255e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002558:	e001      	b.n	800255e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	50040300 	.word	0x50040300
 800256c:	50040100 	.word	0x50040100
 8002570:	50040000 	.word	0x50040000

08002574 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_Stop+0x16>
 8002586:	2302      	movs	r3, #2
 8002588:	e023      	b.n	80025d2 <HAL_ADC_Stop+0x5e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002592:	2103      	movs	r1, #3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 ff31 	bl	80033fc <ADC_ConversionStop>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f001 f86b 	bl	8003680 <ADC_Disable>
 80025aa:	4603      	mov	r3, r0
 80025ac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e6:	4866      	ldr	r0, [pc, #408]	@ (8002780 <HAL_ADC_PollForConversion+0x1a4>)
 80025e8:	f7ff fca0 	bl	8001f2c <LL_ADC_GetMultimode>
 80025ec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d102      	bne.n	80025fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025f6:	2308      	movs	r3, #8
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e02a      	b.n	8002652 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d002      	beq.n	800260e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b09      	cmp	r3, #9
 800260c:	d111      	bne.n	8002632 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0a4      	b.n	8002776 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800262c:	2304      	movs	r3, #4
 800262e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002630:	e00f      	b.n	8002652 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002632:	4853      	ldr	r0, [pc, #332]	@ (8002780 <HAL_ADC_PollForConversion+0x1a4>)
 8002634:	f7ff fc88 	bl	8001f48 <LL_ADC_GetMultiDMATransfer>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e093      	b.n	8002776 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800264e:	2304      	movs	r3, #4
 8002650:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002652:	f7ff fb11 	bl	8001c78 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002658:	e021      	b.n	800269e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d01d      	beq.n	800269e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002662:	f7ff fb09 	bl	8001c78 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <HAL_ADC_PollForConversion+0x9c>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d112      	bne.n	800269e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10b      	bne.n	800269e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	f043 0204 	orr.w	r2, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e06b      	b.n	8002776 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0d6      	beq.n	800265a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fb94 	bl	8001dea <LL_ADC_REG_IsTriggerSourceSWStart>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01c      	beq.n	8002702 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e5b      	ldrb	r3, [r3, #25]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d118      	bne.n	8002702 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d111      	bne.n	8002702 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_ADC_PollForConversion+0x1a8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d002      	beq.n	8002712 <HAL_ADC_PollForConversion+0x136>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	e000      	b.n	8002714 <HAL_ADC_PollForConversion+0x138>
 8002712:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <HAL_ADC_PollForConversion+0x1ac>)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	4293      	cmp	r3, r2
 800271a:	d008      	beq.n	800272e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d002      	beq.n	800272e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b09      	cmp	r3, #9
 800272c:	d104      	bne.n	8002738 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	e00c      	b.n	8002752 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_ADC_PollForConversion+0x1a8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d002      	beq.n	8002748 <HAL_ADC_PollForConversion+0x16c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e000      	b.n	800274a <HAL_ADC_PollForConversion+0x16e>
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_ADC_PollForConversion+0x1ac>)
 800274a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d104      	bne.n	8002762 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2208      	movs	r2, #8
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e008      	b.n	8002774 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	220c      	movs	r2, #12
 8002772:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	50040300 	.word	0x50040300
 8002784:	50040100 	.word	0x50040100
 8002788:	50040000 	.word	0x50040000

0800278c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	@ 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c4:	4882      	ldr	r0, [pc, #520]	@ (80029d0 <HAL_ADC_IRQHandler+0x228>)
 80027c6:	f7ff fbb1 	bl	8001f2c <LL_ADC_GetMultimode>
 80027ca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <HAL_ADC_IRQHandler+0x5e>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d012      	beq.n	8002806 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f001 f87b 	bl	80038f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2202      	movs	r2, #2
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_ADC_IRQHandler+0x72>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8083 	beq.w	800292c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d07d      	beq.n	800292c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff facc 	bl	8001dea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d062      	beq.n	800291e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5d      	ldr	r2, [pc, #372]	@ (80029d4 <HAL_ADC_IRQHandler+0x22c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d002      	beq.n	8002868 <HAL_ADC_IRQHandler+0xc0>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	e000      	b.n	800286a <HAL_ADC_IRQHandler+0xc2>
 8002868:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <HAL_ADC_IRQHandler+0x230>)
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4293      	cmp	r3, r2
 8002870:	d008      	beq.n	8002884 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d002      	beq.n	8002884 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b09      	cmp	r3, #9
 8002882:	d104      	bne.n	800288e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	e00c      	b.n	80028a8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a50      	ldr	r2, [pc, #320]	@ (80029d4 <HAL_ADC_IRQHandler+0x22c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d002      	beq.n	800289e <HAL_ADC_IRQHandler+0xf6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	e000      	b.n	80028a0 <HAL_ADC_IRQHandler+0xf8>
 800289e:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <HAL_ADC_IRQHandler+0x230>)
 80028a0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d135      	bne.n	800291e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d12e      	bne.n	800291e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fc11 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11a      	bne.n	8002906 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 020c 	bic.w	r2, r2, #12
 80028de:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d112      	bne.n	800291e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54
 8002904:	e00b      	b.n	800291e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290a:	f043 0210 	orr.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f95c 	bl	8002bdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	220c      	movs	r2, #12
 800292a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_ADC_IRQHandler+0x198>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 809f 	beq.w	8002a8a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8099 	beq.w	8002a8a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fa77 	bl	8001e68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800297a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fa32 	bl	8001dea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002986:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_ADC_IRQHandler+0x22c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d002      	beq.n	8002998 <HAL_ADC_IRQHandler+0x1f0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e000      	b.n	800299a <HAL_ADC_IRQHandler+0x1f2>
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_ADC_IRQHandler+0x230>)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4293      	cmp	r3, r2
 80029a0:	d008      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d002      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	d104      	bne.n	80029be <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e013      	b.n	80029e6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <HAL_ADC_IRQHandler+0x22c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_ADC_IRQHandler+0x234>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	e007      	b.n	80029de <HAL_ADC_IRQHandler+0x236>
 80029ce:	bf00      	nop
 80029d0:	50040300 	.word	0x50040300
 80029d4:	50040100 	.word	0x50040100
 80029d8:	50040000 	.word	0x50040000
 80029dc:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd4 <HAL_ADC_IRQHandler+0x42c>)
 80029de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d047      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x25e>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03f      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d13a      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b40      	cmp	r3, #64	@ 0x40
 8002a12:	d133      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d12e      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb89 	bl	800213a <LL_ADC_INJ_IsConversionOngoing>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11a      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d112      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a62:	e00b      	b.n	8002a7c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f043 0210 	orr.w	r2, r3, #16
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 ff11 	bl	80038a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2260      	movs	r2, #96	@ 0x60
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d011      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x310>
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8a0 	bl	8002bf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2280      	movs	r2, #128	@ 0x80
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x340>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fef7 	bl	80038cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d012      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x370>
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fee9 	bl	80038e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d036      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x3e8>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d031      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002b34:	2301      	movs	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	e014      	b.n	8002b64 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b40:	4825      	ldr	r0, [pc, #148]	@ (8002bd8 <HAL_ADC_IRQHandler+0x430>)
 8002b42:	f7ff fa01 	bl	8001f48 <LL_ADC_GetMultiDMATransfer>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b50:	e008      	b.n	8002b64 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10e      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	f043 0202 	orr.w	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f83e 	bl	8002c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d018      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x424>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	f043 0208 	orr.w	r2, r3, #8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fe76 	bl	80038b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	@ 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	50040000 	.word	0x50040000
 8002bd8:	50040300 	.word	0x50040300

08002bdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b0b6      	sub	sp, #216	@ 0xd8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x22>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e3c9      	b.n	80033ce <HAL_ADC_ConfigChannel+0x7b6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fa50 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 83aa 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d824      	bhi.n	8002cae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	3b02      	subs	r3, #2
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d81b      	bhi.n	8002ca6 <HAL_ADC_ConfigChannel+0x8e>
 8002c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <HAL_ADC_ConfigChannel+0x5c>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002c95 	.word	0x08002c95
 8002c80:	08002c9d 	.word	0x08002c9d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c84:	230c      	movs	r3, #12
 8002c86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c8a:	e010      	b.n	8002cae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c8c:	2312      	movs	r3, #18
 8002c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c92:	e00c      	b.n	8002cae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c94:	2318      	movs	r3, #24
 8002c96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c9a:	e008      	b.n	8002cae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002cbc:	f7ff f8a8 	bl	8001e10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fa11 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 8002cca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fa31 	bl	800213a <LL_ADC_INJ_IsConversionOngoing>
 8002cd8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 81a4 	bne.w	800302e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 819f 	bne.w	800302e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f7ff f8c6 	bl	8001e8e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d00a      	beq.n	8002d3a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	6919      	ldr	r1, [r3, #16]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d34:	f7ff f804 	bl	8001d40 <LL_ADC_SetOffset>
 8002d38:	e179      	b.n	800302e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f821 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x14e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f816 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	e01e      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x18c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f80b 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e004      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x1a4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	e018      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1d6>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002de4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d106      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ffda 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe ffbe 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x214>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe ffb3 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	e01e      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x252>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ffa8 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e004      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x26a>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	e018      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x29c>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e004      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d106      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe ff77 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe ff5b 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x2da>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ff50 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	e01e      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x318>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe ff45 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e004      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x330>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	e014      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x35a>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e004      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d106      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe ff18 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2103      	movs	r1, #3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fefc 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x398>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fef1 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	f003 021f 	and.w	r2, r3, #31
 8002fae:	e017      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x3c8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fee6 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x3e0>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	e011      	b.n	800301c <HAL_ADC_ConfigChannel+0x404>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003008:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800300a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2103      	movs	r1, #3
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fec3 	bl	8001db4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f80c 	bl	8002050 <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 8140 	bne.w	80032c0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	461a      	mov	r2, r3
 800304e:	f7fe ff49 	bl	8001ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4a8f      	ldr	r2, [pc, #572]	@ (8003294 <HAL_ADC_ConfigChannel+0x67c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	f040 8131 	bne.w	80032c0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x46e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	3301      	adds	r3, #1
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2b09      	cmp	r3, #9
 800307c:	bf94      	ite	ls
 800307e:	2301      	movls	r3, #1
 8003080:	2300      	movhi	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	e019      	b.n	80030ba <HAL_ADC_ConfigChannel+0x4a2>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003096:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e003      	b.n	80030aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80030a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	bf94      	ite	ls
 80030b4:	2301      	movls	r3, #1
 80030b6:	2300      	movhi	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d079      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_ADC_ConfigChannel+0x4c2>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030d8:	e015      	b.n	8003106 <HAL_ADC_ConfigChannel+0x4ee>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80030e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80030ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	069b      	lsls	r3, r3, #26
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x50e>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0e9b      	lsrs	r3, r3, #26
 8003118:	3301      	adds	r3, #1
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	e017      	b.n	8003156 <HAL_ADC_ConfigChannel+0x53e>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003136:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e003      	b.n	800314a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	ea42 0103 	orr.w	r1, r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_ADC_ConfigChannel+0x564>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	3301      	adds	r3, #1
 800316e:	f003 021f 	and.w	r2, r3, #31
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	051b      	lsls	r3, r3, #20
 800317a:	e018      	b.n	80031ae <HAL_ADC_ConfigChannel+0x596>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e003      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f003 021f 	and.w	r2, r3, #31
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ae:	430b      	orrs	r3, r1
 80031b0:	e081      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x5b6>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	3301      	adds	r3, #1
 80031c6:	069b      	lsls	r3, r3, #26
 80031c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031cc:	e015      	b.n	80031fa <HAL_ADC_ConfigChannel+0x5e2>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80031e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031e6:	2320      	movs	r3, #32
 80031e8:	e003      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	069b      	lsls	r3, r3, #26
 80031f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_ADC_ConfigChannel+0x602>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	3301      	adds	r3, #1
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	e017      	b.n	800324a <HAL_ADC_ConfigChannel+0x632>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	61bb      	str	r3, [r7, #24]
  return result;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	ea42 0103 	orr.w	r1, r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x65e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	051b      	lsls	r3, r3, #20
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003274:	e01e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x69c>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	60fb      	str	r3, [r7, #12]
  return result;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e006      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x688>
 8003292:	bf00      	nop
 8003294:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	f003 021f 	and.w	r2, r3, #31
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	051b      	lsls	r3, r3, #20
 80032b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ba:	4619      	mov	r1, r3
 80032bc:	f7fe fde7 	bl	8001e8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b44      	ldr	r3, [pc, #272]	@ (80033d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d07a      	beq.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032cc:	4843      	ldr	r0, [pc, #268]	@ (80033dc <HAL_ADC_ConfigChannel+0x7c4>)
 80032ce:	f7fe fd29 	bl	8001d24 <LL_ADC_GetCommonPathInternalCh>
 80032d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a41      	ldr	r2, [pc, #260]	@ (80033e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d12c      	bne.n	800333a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d126      	bne.n	800333a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a3c      	ldr	r2, [pc, #240]	@ (80033e4 <HAL_ADC_ConfigChannel+0x7cc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x6e8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3b      	ldr	r2, [pc, #236]	@ (80033e8 <HAL_ADC_ConfigChannel+0x7d0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d15d      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003304:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003308:	4619      	mov	r1, r3
 800330a:	4834      	ldr	r0, [pc, #208]	@ (80033dc <HAL_ADC_ConfigChannel+0x7c4>)
 800330c:	f7fe fcf7 	bl	8001cfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003310:	4b36      	ldr	r3, [pc, #216]	@ (80033ec <HAL_ADC_ConfigChannel+0x7d4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	4a36      	ldr	r2, [pc, #216]	@ (80033f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800332a:	e002      	b.n	8003332 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3b01      	subs	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f9      	bne.n	800332c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003338:	e040      	b.n	80033bc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d118      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d112      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_ADC_ConfigChannel+0x74c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a22      	ldr	r2, [pc, #136]	@ (80033e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d12d      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003368:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800336c:	4619      	mov	r1, r3
 800336e:	481b      	ldr	r0, [pc, #108]	@ (80033dc <HAL_ADC_ConfigChannel+0x7c4>)
 8003370:	f7fe fcc5 	bl	8001cfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003374:	e024      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1f      	ldr	r2, [pc, #124]	@ (80033f8 <HAL_ADC_ConfigChannel+0x7e0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d120      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11a      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d115      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800339a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800339e:	4619      	mov	r1, r3
 80033a0:	480e      	ldr	r0, [pc, #56]	@ (80033dc <HAL_ADC_ConfigChannel+0x7c4>)
 80033a2:	f7fe fcac 	bl	8001cfe <LL_ADC_SetCommonPathInternalCh>
 80033a6:	e00c      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80033ba:	e002      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	37d8      	adds	r7, #216	@ 0xd8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	80080000 	.word	0x80080000
 80033dc:	50040300 	.word	0x50040300
 80033e0:	c7520000 	.word	0xc7520000
 80033e4:	50040000 	.word	0x50040000
 80033e8:	50040200 	.word	0x50040200
 80033ec:	20000000 	.word	0x20000000
 80033f0:	053e2d63 	.word	0x053e2d63
 80033f4:	cb840000 	.word	0xcb840000
 80033f8:	80000001 	.word	0x80000001

080033fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fe6a 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 8003418:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fe8b 	bl	800213a <LL_ADC_INJ_IsConversionOngoing>
 8003424:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8098 	beq.w	8003564 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02a      	beq.n	8003498 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7e5b      	ldrb	r3, [r3, #25]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d126      	bne.n	8003498 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7e1b      	ldrb	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d122      	bne.n	8003498 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003452:	2301      	movs	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003456:	e014      	b.n	8003482 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4a45      	ldr	r2, [pc, #276]	@ (8003570 <ADC_ConversionStop+0x174>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d90d      	bls.n	800347c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e074      	b.n	8003566 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	3301      	adds	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d1e3      	bne.n	8003458 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2240      	movs	r2, #64	@ 0x40
 8003496:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d014      	beq.n	80034c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fe22 	bl	80020ec <LL_ADC_REG_IsConversionOngoing>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fddf 	bl	8002076 <LL_ADC_IsDisableOngoing>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fdfe 	bl	80020c4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d014      	beq.n	80034f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fe31 	bl	800213a <LL_ADC_INJ_IsConversionOngoing>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fdc7 	bl	8002076 <LL_ADC_IsDisableOngoing>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fe0d 	bl	8002112 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d005      	beq.n	800350a <ADC_ConversionStop+0x10e>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d105      	bne.n	8003510 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003504:	230c      	movs	r3, #12
 8003506:	617b      	str	r3, [r7, #20]
        break;
 8003508:	e005      	b.n	8003516 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800350a:	2308      	movs	r3, #8
 800350c:	617b      	str	r3, [r7, #20]
        break;
 800350e:	e002      	b.n	8003516 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003510:	2304      	movs	r3, #4
 8003512:	617b      	str	r3, [r7, #20]
        break;
 8003514:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003516:	f7fe fbaf 	bl	8001c78 <HAL_GetTick>
 800351a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800351c:	e01b      	b.n	8003556 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800351e:	f7fe fbab 	bl	8001c78 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b05      	cmp	r3, #5
 800352a:	d914      	bls.n	8003556 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e007      	b.n	8003566 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1dc      	bne.n	800351e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	a33fffff 	.word	0xa33fffff

08003574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fd63 	bl	8002050 <LL_ADC_IsEnabled>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d169      	bne.n	8003664 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <ADC_Enable+0xfc>)
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e055      	b.n	8003666 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fd1e 	bl	8002000 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035c4:	482b      	ldr	r0, [pc, #172]	@ (8003674 <ADC_Enable+0x100>)
 80035c6:	f7fe fbad 	bl	8001d24 <LL_ADC_GetCommonPathInternalCh>
 80035ca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <ADC_Enable+0x104>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	4a28      	ldr	r2, [pc, #160]	@ (800367c <ADC_Enable+0x108>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035ee:	e002      	b.n	80035f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f9      	bne.n	80035f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035fc:	f7fe fb3c 	bl	8001c78 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003602:	e028      	b.n	8003656 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fd21 	bl	8002050 <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe fcf1 	bl	8002000 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800361e:	f7fe fb2b 	bl	8001c78 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d914      	bls.n	8003656 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d00d      	beq.n	8003656 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363e:	f043 0210 	orr.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d1cf      	bne.n	8003604 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	8000003f 	.word	0x8000003f
 8003674:	50040300 	.word	0x50040300
 8003678:	20000000 	.word	0x20000000
 800367c:	053e2d63 	.word	0x053e2d63

08003680 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fcf2 	bl	8002076 <LL_ADC_IsDisableOngoing>
 8003692:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe fcd9 	bl	8002050 <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d047      	beq.n	8003734 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d144      	bne.n	8003734 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030d 	and.w	r3, r3, #13
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d10c      	bne.n	80036d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fcb3 	bl	8002028 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2203      	movs	r2, #3
 80036c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ca:	f7fe fad5 	bl	8001c78 <HAL_GetTick>
 80036ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036d0:	e029      	b.n	8003726 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e023      	b.n	8003736 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ee:	f7fe fac3 	bl	8001c78 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d914      	bls.n	8003726 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e007      	b.n	8003736 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1dc      	bne.n	80036ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <LL_ADC_IsEnabled>:
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsEnabled+0x18>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsEnabled+0x1a>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_StartCalibration>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003776:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003780:	4313      	orrs	r3, r2
 8003782:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_IsCalibrationOnGoing>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037aa:	d101      	bne.n	80037b0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_ADC_REG_IsConversionOngoing>:
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_ADCEx_Calibration_Start+0x1c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e04d      	b.n	800389c <HAL_ADCEx_Calibration_Start+0xb8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff39 	bl	8003680 <ADC_Disable>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d136      	bne.n	8003886 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003820:	f023 0302 	bic.w	r3, r3, #2
 8003824:	f043 0202 	orr.w	r2, r3, #2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff96 	bl	8003764 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003838:	e014      	b.n	8003864 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003846:	d30d      	bcc.n	8003864 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f023 0312 	bic.w	r3, r3, #18
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01b      	b.n	800389c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff94 	bl	8003796 <LL_ADC_IsCalibrationOnGoing>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e2      	bne.n	800383a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003878:	f023 0303 	bic.w	r3, r3, #3
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	@ 0x54
 8003884:	e005      	b.n	8003892 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b09f      	sub	sp, #124	@ 0x7c
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003922:	2302      	movs	r3, #2
 8003924:	e093      	b.n	8003a4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800392e:	2300      	movs	r3, #0
 8003930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003932:	2300      	movs	r3, #0
 8003934:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a47      	ldr	r2, [pc, #284]	@ (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d102      	bne.n	8003946 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003940:	4b46      	ldr	r3, [pc, #280]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	e001      	b.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e072      	b.n	8003a4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff27 	bl	80037be <LL_ADC_REG_IsConversionOngoing>
 8003970:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff21 	bl	80037be <LL_ADC_REG_IsConversionOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d154      	bne.n	8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003984:	2b00      	cmp	r3, #0
 8003986:	d151      	bne.n	8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003988:	4b35      	ldr	r3, [pc, #212]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800398a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02c      	beq.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039a6:	035b      	lsls	r3, r3, #13
 80039a8:	430b      	orrs	r3, r1
 80039aa:	431a      	orrs	r2, r3
 80039ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b0:	4829      	ldr	r0, [pc, #164]	@ (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039b2:	f7ff fec4 	bl	800373e <LL_ADC_IsEnabled>
 80039b6:	4604      	mov	r4, r0
 80039b8:	4828      	ldr	r0, [pc, #160]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039ba:	f7ff fec0 	bl	800373e <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	431c      	orrs	r4, r3
 80039c2:	4828      	ldr	r0, [pc, #160]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80039c4:	f7ff febb 	bl	800373e <LL_ADC_IsEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4323      	orrs	r3, r4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d137      	bne.n	8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6811      	ldr	r1, [r2, #0]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	431a      	orrs	r2, r3
 80039e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ec:	e028      	b.n	8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039fa:	4817      	ldr	r0, [pc, #92]	@ (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039fc:	f7ff fe9f 	bl	800373e <LL_ADC_IsEnabled>
 8003a00:	4604      	mov	r4, r0
 8003a02:	4816      	ldr	r0, [pc, #88]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a04:	f7ff fe9b 	bl	800373e <LL_ADC_IsEnabled>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	431c      	orrs	r4, r3
 8003a0c:	4815      	ldr	r0, [pc, #84]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a0e:	f7ff fe96 	bl	800373e <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4323      	orrs	r3, r4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d112      	bne.n	8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a22:	f023 030f 	bic.w	r3, r3, #15
 8003a26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a2a:	e009      	b.n	8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003a3e:	e000      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	377c      	adds	r7, #124	@ 0x7c
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	50040000 	.word	0x50040000
 8003a5c:	50040100 	.word	0x50040100
 8003a60:	50040300 	.word	0x50040300
 8003a64:	50040200 	.word	0x50040200

08003a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 0307 	and.w	r3, r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	db0b      	blt.n	8003af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	4907      	ldr	r1, [pc, #28]	@ (8003b04 <__NVIC_EnableIRQ+0x38>)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2001      	movs	r0, #1
 8003aee:	fa00 f202 	lsl.w	r2, r0, r2
 8003af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000e100 	.word	0xe000e100

08003b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0a      	blt.n	8003b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	490c      	ldr	r1, [pc, #48]	@ (8003b54 <__NVIC_SetPriority+0x4c>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b30:	e00a      	b.n	8003b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4908      	ldr	r1, [pc, #32]	@ (8003b58 <__NVIC_SetPriority+0x50>)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	761a      	strb	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f1c3 0307 	rsb	r3, r3, #7
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	bf28      	it	cs
 8003b7a:	2304      	movcs	r3, #4
 8003b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d902      	bls.n	8003b8c <NVIC_EncodePriority+0x30>
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3b03      	subs	r3, #3
 8003b8a:	e000      	b.n	8003b8e <NVIC_EncodePriority+0x32>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43d9      	mvns	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	4313      	orrs	r3, r2
         );
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3724      	adds	r7, #36	@ 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd4:	d301      	bcc.n	8003bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00f      	b.n	8003bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <SysTick_Config+0x40>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003be2:	210f      	movs	r1, #15
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	f7ff ff8e 	bl	8003b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <SysTick_Config+0x40>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bf2:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <SysTick_Config+0x40>)
 8003bf4:	2207      	movs	r2, #7
 8003bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	e000e010 	.word	0xe000e010

08003c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff29 	bl	8003a68 <__NVIC_SetPriorityGrouping>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	4603      	mov	r3, r0
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c30:	f7ff ff3e 	bl	8003ab0 <__NVIC_GetPriorityGrouping>
 8003c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f7ff ff8e 	bl	8003b5c <NVIC_EncodePriority>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff5d 	bl	8003b08 <__NVIC_SetPriority>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff31 	bl	8003acc <__NVIC_EnableIRQ>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ffa2 	bl	8003bc4 <SysTick_Config>
 8003c80:	4603      	mov	r3, r0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9a:	e17f      	b.n	8003f9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8171 	beq.w	8003f96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d005      	beq.n	8003ccc <HAL_GPIO_Init+0x40>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d130      	bne.n	8003d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d02:	2201      	movs	r2, #1
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 0201 	and.w	r2, r3, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d118      	bne.n	8003d6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d40:	2201      	movs	r2, #1
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	08db      	lsrs	r3, r3, #3
 8003d56:	f003 0201 	and.w	r2, r3, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d017      	beq.n	8003da8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d123      	bne.n	8003dfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	08da      	lsrs	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3208      	adds	r2, #8
 8003dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	220f      	movs	r2, #15
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0203 	and.w	r2, r3, #3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80ac 	beq.w	8003f96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fbc <HAL_GPIO_Init+0x330>)
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	4a5e      	ldr	r2, [pc, #376]	@ (8003fbc <HAL_GPIO_Init+0x330>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fbc <HAL_GPIO_Init+0x330>)
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e56:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc0 <HAL_GPIO_Init+0x334>)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	220f      	movs	r2, #15
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e80:	d025      	beq.n	8003ece <HAL_GPIO_Init+0x242>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc4 <HAL_GPIO_Init+0x338>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <HAL_GPIO_Init+0x23e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc8 <HAL_GPIO_Init+0x33c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d019      	beq.n	8003ec6 <HAL_GPIO_Init+0x23a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4d      	ldr	r2, [pc, #308]	@ (8003fcc <HAL_GPIO_Init+0x340>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_GPIO_Init+0x236>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fd0 <HAL_GPIO_Init+0x344>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <HAL_GPIO_Init+0x232>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd4 <HAL_GPIO_Init+0x348>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_Init+0x22e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd8 <HAL_GPIO_Init+0x34c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_GPIO_Init+0x22a>
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	e00c      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003eb6:	2307      	movs	r3, #7
 8003eb8:	e00a      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003eba:	2305      	movs	r3, #5
 8003ebc:	e008      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	e006      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e004      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e002      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	f002 0203 	and.w	r2, r2, #3
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	4093      	lsls	r3, r2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ee0:	4937      	ldr	r1, [pc, #220]	@ (8003fc0 <HAL_GPIO_Init+0x334>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eee:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f12:	4a32      	ldr	r2, [pc, #200]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f18:	4b30      	ldr	r3, [pc, #192]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f3c:	4a27      	ldr	r2, [pc, #156]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f42:	4b26      	ldr	r3, [pc, #152]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f66:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f90:	4a12      	ldr	r2, [pc, #72]	@ (8003fdc <HAL_GPIO_Init+0x350>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f47f ae78 	bne.w	8003c9c <HAL_GPIO_Init+0x10>
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	48000800 	.word	0x48000800
 8003fcc:	48000c00 	.word	0x48000c00
 8003fd0:	48001000 	.word	0x48001000
 8003fd4:	48001400 	.word	0x48001400
 8003fd8:	48001800 	.word	0x48001800
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
 8003fec:	4613      	mov	r3, r2
 8003fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff0:	787b      	ldrb	r3, [r7, #1]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ffc:	e002      	b.n	8004004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800401a:	4b08      	ldr	r3, [pc, #32]	@ (800403c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d006      	beq.n	8004034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fc fe32 	bl	8000c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010400 	.word	0x40010400

08004040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e08d      	b.n	800416e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd fbda 	bl	8001820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	@ 0x24
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004090:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e006      	b.n	80040c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d108      	bne.n	80040e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	e007      	b.n	80040f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b20      	cmp	r3, #32
 800418a:	d138      	bne.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004196:	2302      	movs	r3, #2
 8004198:	e032      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2224      	movs	r2, #36	@ 0x24
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d139      	bne.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422c:	2302      	movs	r3, #2
 800422e:	e033      	b.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	@ 0x24
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800425e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <HAL_PWREx_GetVoltageRange+0x18>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40007000 	.word	0x40007000

080042c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ce:	d130      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d0:	4b23      	ldr	r3, [pc, #140]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042dc:	d038      	beq.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2232      	movs	r2, #50	@ 0x32
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004304:	e002      	b.n	800430c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b01      	subs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430c:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d102      	bne.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f2      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004320:	4b0f      	ldr	r3, [pc, #60]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	d110      	bne.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e00f      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004332:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d007      	beq.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004348:	4a05      	ldr	r2, [pc, #20]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800434e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000
 8004364:	20000000 	.word	0x20000000
 8004368:	431bde83 	.word	0x431bde83

0800436c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e3ca      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437e:	4b97      	ldr	r3, [pc, #604]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004388:	4b94      	ldr	r3, [pc, #592]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80e4 	beq.w	8004568 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4a>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	f040 808b 	bne.w	80044c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 8087 	bne.w	80044c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b6:	4b89      	ldr	r3, [pc, #548]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e3a2      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	4b82      	ldr	r3, [pc, #520]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_RCC_OscConfig+0x7c>
 80043de:	4b7f      	ldr	r3, [pc, #508]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e6:	e005      	b.n	80043f4 <HAL_RCC_OscConfig+0x88>
 80043e8:	4b7c      	ldr	r3, [pc, #496]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d223      	bcs.n	8004440 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fd55 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e383      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440c:	4b73      	ldr	r3, [pc, #460]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a72      	ldr	r2, [pc, #456]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004412:	f043 0308 	orr.w	r3, r3, #8
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b70      	ldr	r3, [pc, #448]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	496d      	ldr	r1, [pc, #436]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	4b6c      	ldr	r3, [pc, #432]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4968      	ldr	r1, [pc, #416]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
 800443e:	e025      	b.n	800448c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004440:	4b66      	ldr	r3, [pc, #408]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a65      	ldr	r2, [pc, #404]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004446:	f043 0308 	orr.w	r3, r3, #8
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b63      	ldr	r3, [pc, #396]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4960      	ldr	r1, [pc, #384]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445e:	4b5f      	ldr	r3, [pc, #380]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	495b      	ldr	r1, [pc, #364]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fd15 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e343      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800448c:	f000 fc4a 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b52      	ldr	r3, [pc, #328]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	4950      	ldr	r1, [pc, #320]	@ (80045e0 <HAL_RCC_OscConfig+0x274>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
 80044a8:	4a4e      	ldr	r2, [pc, #312]	@ (80045e4 <HAL_RCC_OscConfig+0x278>)
 80044aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044ac:	4b4e      	ldr	r3, [pc, #312]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fb91 	bl	8001bd8 <HAL_InitTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d052      	beq.n	8004566 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	e327      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d032      	beq.n	8004532 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044cc:	4b43      	ldr	r3, [pc, #268]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a42      	ldr	r2, [pc, #264]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d8:	f7fd fbce 	bl	8001c78 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e0:	f7fd fbca 	bl	8001c78 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e310      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f2:	4b3a      	ldr	r3, [pc, #232]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fe:	4b37      	ldr	r3, [pc, #220]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a36      	ldr	r2, [pc, #216]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b34      	ldr	r3, [pc, #208]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4931      	ldr	r1, [pc, #196]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800451c:	4b2f      	ldr	r3, [pc, #188]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	492c      	ldr	r1, [pc, #176]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	e01a      	b.n	8004568 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004532:	4b2a      	ldr	r3, [pc, #168]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a29      	ldr	r2, [pc, #164]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800453e:	f7fd fb9b 	bl	8001c78 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004546:	f7fd fb97 	bl	8001c78 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e2dd      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004558:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x1da>
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004566:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d074      	beq.n	800465e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x21a>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d10e      	bne.n	800459e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d10b      	bne.n	800459e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004586:	4b15      	ldr	r3, [pc, #84]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d064      	beq.n	800465c <HAL_RCC_OscConfig+0x2f0>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d160      	bne.n	800465c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e2ba      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x24a>
 80045a8:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0b      	ldr	r2, [pc, #44]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e026      	b.n	8004604 <HAL_RCC_OscConfig+0x298>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045be:	d115      	bne.n	80045ec <HAL_RCC_OscConfig+0x280>
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80045c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b03      	ldr	r3, [pc, #12]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a02      	ldr	r2, [pc, #8]	@ (80045dc <HAL_RCC_OscConfig+0x270>)
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e014      	b.n	8004604 <HAL_RCC_OscConfig+0x298>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	080077c8 	.word	0x080077c8
 80045e4:	20000000 	.word	0x20000000
 80045e8:	20000004 	.word	0x20000004
 80045ec:	4ba0      	ldr	r3, [pc, #640]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a9f      	ldr	r2, [pc, #636]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b9d      	ldr	r3, [pc, #628]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a9c      	ldr	r2, [pc, #624]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fb34 	bl	8001c78 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fb30 	bl	8001c78 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e276      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	4b92      	ldr	r3, [pc, #584]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x2a8>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fb20 	bl	8001c78 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd fb1c 	bl	8001c78 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	@ 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e262      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464e:	4b88      	ldr	r3, [pc, #544]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x2d0>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d060      	beq.n	800472c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x310>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d119      	bne.n	80046aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d116      	bne.n	80046aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	4b7c      	ldr	r3, [pc, #496]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_OscConfig+0x328>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e23f      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b76      	ldr	r3, [pc, #472]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	4973      	ldr	r1, [pc, #460]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a8:	e040      	b.n	800472c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d023      	beq.n	80046fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fd fadb 	bl	8001c78 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fd fad7 	bl	8001c78 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e21d      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d8:	4b65      	ldr	r3, [pc, #404]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b62      	ldr	r3, [pc, #392]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	495f      	ldr	r1, [pc, #380]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
 80046f8:	e018      	b.n	800472c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fd fab7 	bl	8001c78 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470e:	f7fd fab3 	bl	8001c78 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1f9      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004720:	4b53      	ldr	r3, [pc, #332]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d03c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01c      	beq.n	800477a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004740:	4b4b      	ldr	r3, [pc, #300]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004746:	4a4a      	ldr	r2, [pc, #296]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fa92 	bl	8001c78 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fa8e 	bl	8001c78 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1d4      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476a:	4b41      	ldr	r3, [pc, #260]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCC_OscConfig+0x3ec>
 8004778:	e01b      	b.n	80047b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800477a:	4b3d      	ldr	r3, [pc, #244]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004780:	4a3b      	ldr	r2, [pc, #236]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7fd fa75 	bl	8001c78 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7fd fa71 	bl	8001c78 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1b7      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a4:	4b32      	ldr	r3, [pc, #200]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80a6 	beq.w	800490c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10d      	bne.n	80047ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d4:	4a26      	ldr	r2, [pc, #152]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	@ 0x58
 80047dc:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ec:	4b21      	ldr	r3, [pc, #132]	@ (8004874 <HAL_RCC_OscConfig+0x508>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d118      	bne.n	800482a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004874 <HAL_RCC_OscConfig+0x508>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004874 <HAL_RCC_OscConfig+0x508>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004804:	f7fd fa38 	bl	8001c78 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fd fa34 	bl	8001c78 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e17a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_RCC_OscConfig+0x508>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x4d8>
 8004832:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	4a0d      	ldr	r2, [pc, #52]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004842:	e029      	b.n	8004898 <HAL_RCC_OscConfig+0x52c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d115      	bne.n	8004878 <HAL_RCC_OscConfig+0x50c>
 800484c:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	4a07      	ldr	r2, [pc, #28]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800485c:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	4a03      	ldr	r2, [pc, #12]	@ (8004870 <HAL_RCC_OscConfig+0x504>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800486c:	e014      	b.n	8004898 <HAL_RCC_OscConfig+0x52c>
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
 8004878:	4b9c      	ldr	r3, [pc, #624]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	4a9b      	ldr	r2, [pc, #620]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004888:	4b98      	ldr	r3, [pc, #608]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	4a97      	ldr	r2, [pc, #604]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d016      	beq.n	80048ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fd f9ea 	bl	8001c78 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fd f9e6 	bl	8001c78 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e12a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048be:	4b8b      	ldr	r3, [pc, #556]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ed      	beq.n	80048a8 <HAL_RCC_OscConfig+0x53c>
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fd f9d3 	bl	8001c78 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fd f9cf 	bl	8001c78 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e113      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ec:	4b7f      	ldr	r3, [pc, #508]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ed      	bne.n	80048d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048fa:	7ffb      	ldrb	r3, [r7, #31]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d105      	bne.n	800490c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004900:	4b7a      	ldr	r3, [pc, #488]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	4a79      	ldr	r2, [pc, #484]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80fe 	beq.w	8004b12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	2b02      	cmp	r3, #2
 800491c:	f040 80d0 	bne.w	8004ac0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004920:	4b72      	ldr	r3, [pc, #456]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	429a      	cmp	r2, r3
 8004932:	d130      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	3b01      	subs	r3, #1
 8004940:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d127      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004950:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d11f      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004960:	2a07      	cmp	r2, #7
 8004962:	bf14      	ite	ne
 8004964:	2201      	movne	r2, #1
 8004966:	2200      	moveq	r2, #0
 8004968:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496a:	4293      	cmp	r3, r2
 800496c:	d113      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d109      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d06e      	beq.n	8004a74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d069      	beq.n	8004a70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800499c:	4b53      	ldr	r3, [pc, #332]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049a8:	4b50      	ldr	r3, [pc, #320]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0ad      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049b8:	4b4c      	ldr	r3, [pc, #304]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80049be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c4:	f7fd f958 	bl	8001c78 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd f954 	bl	8001c78 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e09a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049de:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ea:	4b40      	ldr	r3, [pc, #256]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	4b40      	ldr	r3, [pc, #256]	@ (8004af0 <HAL_RCC_OscConfig+0x784>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049fa:	3a01      	subs	r2, #1
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	4311      	orrs	r1, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a04:	0212      	lsls	r2, r2, #8
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a0c:	0852      	lsrs	r2, r2, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0552      	lsls	r2, r2, #21
 8004a12:	4311      	orrs	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a18:	0852      	lsrs	r2, r2, #1
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0652      	lsls	r2, r2, #25
 8004a1e:	4311      	orrs	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a24:	0912      	lsrs	r2, r2, #4
 8004a26:	0452      	lsls	r2, r2, #17
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	4930      	ldr	r1, [pc, #192]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a30:	4b2e      	ldr	r3, [pc, #184]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2d      	ldr	r2, [pc, #180]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a48:	f7fd f916 	bl	8001c78 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd f912 	bl	8001c78 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e058      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6e:	e050      	b.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e04f      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d148      	bne.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a80:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a98:	f7fd f8ee 	bl	8001c78 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fd f8ea 	bl	8001c78 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e030      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x734>
 8004abe:	e028      	b.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d023      	beq.n	8004b0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a08      	ldr	r2, [pc, #32]	@ (8004aec <HAL_RCC_OscConfig+0x780>)
 8004acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd f8d1 	bl	8001c78 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd f8cd 	bl	8001c78 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d905      	bls.n	8004af4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e013      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
 8004aec:	40021000 	.word	0x40021000
 8004af0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_OscConfig+0x7b0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ec      	bne.n	8004ada <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <HAL_RCC_OscConfig+0x7b0>)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	4905      	ldr	r1, [pc, #20]	@ (8004b1c <HAL_RCC_OscConfig+0x7b0>)
 8004b06:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <HAL_RCC_OscConfig+0x7b4>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60cb      	str	r3, [r1, #12]
 8004b0c:	e001      	b.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	feeefffc 	.word	0xfeeefffc

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0e7      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b75      	ldr	r3, [pc, #468]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d910      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b72      	ldr	r3, [pc, #456]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 0207 	bic.w	r2, r3, #7
 8004b4e:	4970      	ldr	r1, [pc, #448]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b6e      	ldr	r3, [pc, #440]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0cf      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b63      	ldr	r3, [pc, #396]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4960      	ldr	r1, [pc, #384]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d04c      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004baa:	4b5a      	ldr	r3, [pc, #360]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d121      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0a6      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc2:	4b54      	ldr	r3, [pc, #336]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d115      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e09a      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bda:	4b4e      	ldr	r3, [pc, #312]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e08e      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e086      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b46      	ldr	r3, [pc, #280]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4943      	ldr	r1, [pc, #268]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fd f834 	bl	8001c78 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fd f830 	bl	8001c78 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e06e      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b31      	ldr	r3, [pc, #196]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d208      	bcs.n	8004c6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b2e      	ldr	r3, [pc, #184]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	492b      	ldr	r1, [pc, #172]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6a:	4b29      	ldr	r3, [pc, #164]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d210      	bcs.n	8004c9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c78:	4b25      	ldr	r3, [pc, #148]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 0207 	bic.w	r2, r3, #7
 8004c80:	4923      	ldr	r1, [pc, #140]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e036      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4918      	ldr	r1, [pc, #96]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc4:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4910      	ldr	r1, [pc, #64]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd8:	f000 f824 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	490b      	ldr	r1, [pc, #44]	@ (8004d18 <HAL_RCC_ClockConfig+0x1f4>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <HAL_RCC_ClockConfig+0x1f8>)
 8004cf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <HAL_RCC_ClockConfig+0x1fc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fc ff6b 	bl	8001bd8 <HAL_InitTick>
 8004d02:	4603      	mov	r3, r0
 8004d04:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40022000 	.word	0x40022000
 8004d14:	40021000 	.word	0x40021000
 8004d18:	080077c8 	.word	0x080077c8
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	@ 0x24
 8004d28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	4b3e      	ldr	r3, [pc, #248]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d11e      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d58:	4b34      	ldr	r3, [pc, #208]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d64:	4b31      	ldr	r3, [pc, #196]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d74:	4b2d      	ldr	r3, [pc, #180]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d80:	4a2b      	ldr	r2, [pc, #172]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d102      	bne.n	8004da2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d9c:	4b25      	ldr	r3, [pc, #148]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e004      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004da8:	4b23      	ldr	r3, [pc, #140]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004daa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b0c      	cmp	r3, #12
 8004db0:	d134      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0xa6>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xac>
 8004dc8:	e005      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dcc:	617b      	str	r3, [r7, #20]
      break;
 8004dce:	e005      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dd0:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd2:	617b      	str	r3, [r7, #20]
      break;
 8004dd4:	e002      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	617b      	str	r3, [r7, #20]
      break;
 8004dda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	fb03 f202 	mul.w	r2, r3, r2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	0e5b      	lsrs	r3, r3, #25
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3724      	adds	r7, #36	@ 0x24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	080077e0 	.word	0x080077e0
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	007a1200 	.word	0x007a1200

08004e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e40:	4b03      	ldr	r3, [pc, #12]	@ (8004e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000000 	.word	0x20000000

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e58:	f7ff fff0 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4904      	ldr	r1, [pc, #16]	@ (8004e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	080077d8 	.word	0x080077d8

08004e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e84:	f7ff ffda 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0adb      	lsrs	r3, r3, #11
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	080077d8 	.word	0x080077d8

08004eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ec4:	f7ff f9ee 	bl	80042a4 <HAL_PWREx_GetVoltageRange>
 8004ec8:	6178      	str	r0, [r7, #20]
 8004eca:	e014      	b.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b25      	ldr	r3, [pc, #148]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	4a24      	ldr	r2, [pc, #144]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed8:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ee4:	f7ff f9de 	bl	80042a4 <HAL_PWREx_GetVoltageRange>
 8004ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eea:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eee:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efc:	d10b      	bne.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d919      	bls.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f08:	d902      	bls.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e013      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e010      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d902      	bls.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e00a      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	@ 0x80
 8004f26:	d102      	bne.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f28:	2302      	movs	r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e004      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b70      	cmp	r3, #112	@ 0x70
 8004f32:	d101      	bne.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 0207 	bic.w	r2, r3, #7
 8004f40:	4909      	ldr	r1, [pc, #36]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f48:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40022000 	.word	0x40022000

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f74:	2300      	movs	r3, #0
 8004f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f78:	2300      	movs	r3, #0
 8004f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d041      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f90:	d02a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f96:	d824      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fa2:	d81e      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fae:	e018      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb0:	4b86      	ldr	r3, [pc, #536]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a85      	ldr	r2, [pc, #532]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fbc:	e015      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fabb 	bl	8005540 <RCCEx_PLLSAI1_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3320      	adds	r3, #32
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fba6 	bl	8005728 <RCCEx_PLLSAI2_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff0:	4b76      	ldr	r3, [pc, #472]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffe:	4973      	ldr	r1, [pc, #460]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d041      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800501c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005020:	d02a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005022:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005026:	d824      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005028:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502c:	d008      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800502e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005032:	d81e      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800503c:	d010      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800503e:	e018      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005040:	4b62      	ldr	r3, [pc, #392]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a61      	ldr	r2, [pc, #388]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800504c:	e015      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fa73 	bl	8005540 <RCCEx_PLLSAI1_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800505e:	e00c      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3320      	adds	r3, #32
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb5e 	bl	8005728 <RCCEx_PLLSAI2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005070:	e003      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	74fb      	strb	r3, [r7, #19]
      break;
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005080:	4b52      	ldr	r3, [pc, #328]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800508e:	494f      	ldr	r1, [pc, #316]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005096:	e001      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a0 	beq.w	80051ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c4:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c8:	4a40      	ldr	r2, [pc, #256]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80050d0:	4b3e      	ldr	r3, [pc, #248]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e0:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3a      	ldr	r2, [pc, #232]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fdc4 	bl	8001c78 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050f2:	e009      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc fdc0 	bl	8001c78 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d902      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	74fb      	strb	r3, [r7, #19]
        break;
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005108:	4b31      	ldr	r3, [pc, #196]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ef      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d15c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800511a:	4b2c      	ldr	r3, [pc, #176]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01f      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d019      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005138:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005144:	4b21      	ldr	r3, [pc, #132]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514a:	4a20      	ldr	r2, [pc, #128]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005154:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	4a1c      	ldr	r2, [pc, #112]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005164:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fc fd7f 	bl	8001c78 <HAL_GetTick>
 800517a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517c:	e00b      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fc fd7b 	bl	8001c78 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d902      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	74fb      	strb	r3, [r7, #19]
            break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ec      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051aa:	4b08      	ldr	r3, [pc, #32]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ba:	4904      	ldr	r1, [pc, #16]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d8:	7c7b      	ldrb	r3, [r7, #17]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d105      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051de:	4b9e      	ldr	r3, [pc, #632]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	4a9d      	ldr	r2, [pc, #628]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f6:	4b98      	ldr	r3, [pc, #608]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	4994      	ldr	r1, [pc, #592]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005218:	4b8f      	ldr	r3, [pc, #572]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f023 020c 	bic.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	498c      	ldr	r1, [pc, #560]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800523a:	4b87      	ldr	r3, [pc, #540]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	4983      	ldr	r1, [pc, #524]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800525c:	4b7e      	ldr	r3, [pc, #504]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005262:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	497b      	ldr	r1, [pc, #492]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800527e:	4b76      	ldr	r3, [pc, #472]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005284:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528c:	4972      	ldr	r1, [pc, #456]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052a0:	4b6d      	ldr	r3, [pc, #436]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ae:	496a      	ldr	r1, [pc, #424]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052c2:	4b65      	ldr	r3, [pc, #404]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d0:	4961      	ldr	r1, [pc, #388]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f2:	4959      	ldr	r1, [pc, #356]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005306:	4b54      	ldr	r3, [pc, #336]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	4950      	ldr	r1, [pc, #320]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005328:	4b4b      	ldr	r3, [pc, #300]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	4948      	ldr	r1, [pc, #288]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800534a:	4b43      	ldr	r3, [pc, #268]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	493f      	ldr	r1, [pc, #252]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d028      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800536c:	4b3a      	ldr	r3, [pc, #232]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537a:	4937      	ldr	r1, [pc, #220]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800538a:	d106      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800538c:	4b32      	ldr	r3, [pc, #200]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4a31      	ldr	r2, [pc, #196]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005396:	60d3      	str	r3, [r2, #12]
 8005398:	e011      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800539e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053a2:	d10c      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	2101      	movs	r1, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f8c8 	bl	8005540 <RCCEx_PLLSAI1_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d028      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053ca:	4b23      	ldr	r3, [pc, #140]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d8:	491f      	ldr	r1, [pc, #124]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e8:	d106      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053f4:	60d3      	str	r3, [r2, #12]
 80053f6:	e011      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005400:	d10c      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	2101      	movs	r1, #1
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f899 	bl	8005540 <RCCEx_PLLSAI1_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d02b      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005436:	4908      	ldr	r1, [pc, #32]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005446:	d109      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005448:	4b03      	ldr	r3, [pc, #12]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a02      	ldr	r2, [pc, #8]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005452:	60d3      	str	r3, [r2, #12]
 8005454:	e014      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005460:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005464:	d10c      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f867 	bl	8005540 <RCCEx_PLLSAI1_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d02f      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800548c:	4b2b      	ldr	r3, [pc, #172]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005492:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800549a:	4928      	ldr	r1, [pc, #160]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	2102      	movs	r1, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f844 	bl	8005540 <RCCEx_PLLSAI1_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	74bb      	strb	r3, [r7, #18]
 80054c6:	e011      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3320      	adds	r3, #32
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f925 	bl	8005728 <RCCEx_PLLSAI2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054f8:	4b10      	ldr	r3, [pc, #64]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005506:	490d      	ldr	r1, [pc, #52]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800551a:	4b08      	ldr	r3, [pc, #32]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552a:	4904      	ldr	r1, [pc, #16]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005532:	7cbb      	ldrb	r3, [r7, #18]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000

08005540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800554e:	4b75      	ldr	r3, [pc, #468]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800555a:	4b72      	ldr	r3, [pc, #456]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0203 	and.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d10d      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
       ||
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005572:	4b6c      	ldr	r3, [pc, #432]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
       ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d047      	beq.n	8005616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
 800558a:	e044      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d018      	beq.n	80055c6 <RCCEx_PLLSAI1_Config+0x86>
 8005594:	2b03      	cmp	r3, #3
 8005596:	d825      	bhi.n	80055e4 <RCCEx_PLLSAI1_Config+0xa4>
 8005598:	2b01      	cmp	r3, #1
 800559a:	d002      	beq.n	80055a2 <RCCEx_PLLSAI1_Config+0x62>
 800559c:	2b02      	cmp	r3, #2
 800559e:	d009      	beq.n	80055b4 <RCCEx_PLLSAI1_Config+0x74>
 80055a0:	e020      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055a2:	4b60      	ldr	r3, [pc, #384]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11d      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b2:	e01a      	b.n	80055ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c4:	e013      	b.n	80055ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055c6:	4b57      	ldr	r3, [pc, #348]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055d2:	4b54      	ldr	r3, [pc, #336]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055e2:	e006      	b.n	80055f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e004      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ea:	bf00      	nop
 80055ec:	e002      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	3b01      	subs	r3, #1
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	430b      	orrs	r3, r1
 8005610:	4944      	ldr	r1, [pc, #272]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d17d      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800561c:	4b41      	ldr	r3, [pc, #260]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a40      	ldr	r2, [pc, #256]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005628:	f7fc fb26 	bl	8001c78 <HAL_GetTick>
 800562c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800562e:	e009      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005630:	f7fc fb22 	bl	8001c78 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d902      	bls.n	8005644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	73fb      	strb	r3, [r7, #15]
        break;
 8005642:	e005      	b.n	8005650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005644:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ef      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d160      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d111      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800565c:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6892      	ldr	r2, [r2, #8]
 800566c:	0211      	lsls	r1, r2, #8
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68d2      	ldr	r2, [r2, #12]
 8005672:	0912      	lsrs	r2, r2, #4
 8005674:	0452      	lsls	r2, r2, #17
 8005676:	430a      	orrs	r2, r1
 8005678:	492a      	ldr	r1, [pc, #168]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	610b      	str	r3, [r1, #16]
 800567e:	e027      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d112      	bne.n	80056ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005686:	4b27      	ldr	r3, [pc, #156]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800568e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6892      	ldr	r2, [r2, #8]
 8005696:	0211      	lsls	r1, r2, #8
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6912      	ldr	r2, [r2, #16]
 800569c:	0852      	lsrs	r2, r2, #1
 800569e:	3a01      	subs	r2, #1
 80056a0:	0552      	lsls	r2, r2, #21
 80056a2:	430a      	orrs	r2, r1
 80056a4:	491f      	ldr	r1, [pc, #124]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]
 80056aa:	e011      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6892      	ldr	r2, [r2, #8]
 80056bc:	0211      	lsls	r1, r2, #8
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6952      	ldr	r2, [r2, #20]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	3a01      	subs	r2, #1
 80056c6:	0652      	lsls	r2, r2, #25
 80056c8:	430a      	orrs	r2, r1
 80056ca:	4916      	ldr	r1, [pc, #88]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056d0:	4b14      	ldr	r3, [pc, #80]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a13      	ldr	r2, [pc, #76]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056dc:	f7fc facc 	bl	8001c78 <HAL_GetTick>
 80056e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056e2:	e009      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056e4:	f7fc fac8 	bl	8001c78 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d902      	bls.n	80056f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	73fb      	strb	r3, [r7, #15]
          break;
 80056f6:	e005      	b.n	8005704 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ef      	beq.n	80056e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800570a:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	4904      	ldr	r1, [pc, #16]	@ (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000

08005728 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005736:	4b6a      	ldr	r3, [pc, #424]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d018      	beq.n	8005774 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005742:	4b67      	ldr	r3, [pc, #412]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0203 	and.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d10d      	bne.n	800576e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
       ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800575a:	4b61      	ldr	r3, [pc, #388]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
       ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d047      	beq.n	80057fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	e044      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d018      	beq.n	80057ae <RCCEx_PLLSAI2_Config+0x86>
 800577c:	2b03      	cmp	r3, #3
 800577e:	d825      	bhi.n	80057cc <RCCEx_PLLSAI2_Config+0xa4>
 8005780:	2b01      	cmp	r3, #1
 8005782:	d002      	beq.n	800578a <RCCEx_PLLSAI2_Config+0x62>
 8005784:	2b02      	cmp	r3, #2
 8005786:	d009      	beq.n	800579c <RCCEx_PLLSAI2_Config+0x74>
 8005788:	e020      	b.n	80057cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578a:	4b55      	ldr	r3, [pc, #340]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579a:	e01a      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800579c:	4b50      	ldr	r3, [pc, #320]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d116      	bne.n	80057d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ac:	e013      	b.n	80057d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ae:	4b4c      	ldr	r3, [pc, #304]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ba:	4b49      	ldr	r3, [pc, #292]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ca:	e006      	b.n	80057da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e004      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057da:	bf00      	nop
    }

    if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057e2:	4b3f      	ldr	r3, [pc, #252]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	430b      	orrs	r3, r1
 80057f8:	4939      	ldr	r1, [pc, #228]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d167      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005804:	4b36      	ldr	r3, [pc, #216]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a35      	ldr	r2, [pc, #212]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fc fa32 	bl	8001c78 <HAL_GetTick>
 8005814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005816:	e009      	b.n	800582c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005818:	f7fc fa2e 	bl	8001c78 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d902      	bls.n	800582c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	73fb      	strb	r3, [r7, #15]
        break;
 800582a:	e005      	b.n	8005838 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800582c:	4b2c      	ldr	r3, [pc, #176]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ef      	bne.n	8005818 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14a      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d111      	bne.n	8005868 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005844:	4b26      	ldr	r3, [pc, #152]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800584c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	0211      	lsls	r1, r2, #8
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68d2      	ldr	r2, [r2, #12]
 800585a:	0912      	lsrs	r2, r2, #4
 800585c:	0452      	lsls	r2, r2, #17
 800585e:	430a      	orrs	r2, r1
 8005860:	491f      	ldr	r1, [pc, #124]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	614b      	str	r3, [r1, #20]
 8005866:	e011      	b.n	800588c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005868:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005870:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	0211      	lsls	r1, r2, #8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6912      	ldr	r2, [r2, #16]
 800587e:	0852      	lsrs	r2, r2, #1
 8005880:	3a01      	subs	r2, #1
 8005882:	0652      	lsls	r2, r2, #25
 8005884:	430a      	orrs	r2, r1
 8005886:	4916      	ldr	r1, [pc, #88]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005888:	4313      	orrs	r3, r2
 800588a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800588c:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fc f9ee 	bl	8001c78 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a0:	f7fc f9ea 	bl	8001c78 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
          break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058b4:	4b0a      	ldr	r3, [pc, #40]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058c6:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4904      	ldr	r1, [pc, #16]	@ (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e049      	b.n	800598a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fb ffe6 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 fd14 	bl	8006350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e047      	b.n	8005a3c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a23      	ldr	r2, [pc, #140]	@ (8005a48 <HAL_TIM_Base_Start+0xb4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <HAL_TIM_Base_Start+0x66>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c6:	d018      	beq.n	80059fa <HAL_TIM_Base_Start+0x66>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a4c <HAL_TIM_Base_Start+0xb8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_TIM_Base_Start+0x66>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a50 <HAL_TIM_Base_Start+0xbc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_TIM_Base_Start+0x66>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <HAL_TIM_Base_Start+0xc0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_TIM_Base_Start+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_TIM_Base_Start+0xc4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIM_Base_Start+0x66>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a19      	ldr	r2, [pc, #100]	@ (8005a5c <HAL_TIM_Base_Start+0xc8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d115      	bne.n	8005a26 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	4b17      	ldr	r3, [pc, #92]	@ (8005a60 <HAL_TIM_Base_Start+0xcc>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b06      	cmp	r3, #6
 8005a0a:	d015      	beq.n	8005a38 <HAL_TIM_Base_Start+0xa4>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a12:	d011      	beq.n	8005a38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a24:	e008      	b.n	8005a38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e000      	b.n	8005a3a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	00010007 	.word	0x00010007

08005a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e049      	b.n	8005b0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb ff46 	bl	800191c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f000 fc54 	bl	8006350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <HAL_TIM_PWM_Start+0x24>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e03c      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x9e>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d109      	bne.n	8005b52 <HAL_TIM_PWM_Start+0x3e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	bf14      	ite	ne
 8005b4a:	2301      	movne	r3, #1
 8005b4c:	2300      	moveq	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	e02f      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x9e>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d109      	bne.n	8005b6c <HAL_TIM_PWM_Start+0x58>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e022      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x9e>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d109      	bne.n	8005b86 <HAL_TIM_PWM_Start+0x72>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	bf14      	ite	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2300      	moveq	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e015      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x9e>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d109      	bne.n	8005ba0 <HAL_TIM_PWM_Start+0x8c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e008      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x9e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e09c      	b.n	8005cf4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_PWM_Start+0xb6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bc8:	e023      	b.n	8005c12 <HAL_TIM_PWM_Start+0xfe>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_PWM_Start+0xc6>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd8:	e01b      	b.n	8005c12 <HAL_TIM_PWM_Start+0xfe>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start+0xd6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005be8:	e013      	b.n	8005c12 <HAL_TIM_PWM_Start+0xfe>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0xe6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bf8:	e00b      	b.n	8005c12 <HAL_TIM_PWM_Start+0xfe>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0xf6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c08:	e003      	b.n	8005c12 <HAL_TIM_PWM_Start+0xfe>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2201      	movs	r2, #1
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 ffae 	bl	8006b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a35      	ldr	r2, [pc, #212]	@ (8005cfc <HAL_TIM_PWM_Start+0x1e8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x13e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a34      	ldr	r2, [pc, #208]	@ (8005d00 <HAL_TIM_PWM_Start+0x1ec>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x13e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a32      	ldr	r2, [pc, #200]	@ (8005d04 <HAL_TIM_PWM_Start+0x1f0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x13e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a31      	ldr	r2, [pc, #196]	@ (8005d08 <HAL_TIM_PWM_Start+0x1f4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x13e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8005d0c <HAL_TIM_PWM_Start+0x1f8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x142>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_TIM_PWM_Start+0x144>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a22      	ldr	r2, [pc, #136]	@ (8005cfc <HAL_TIM_PWM_Start+0x1e8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x19e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x19e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <HAL_TIM_PWM_Start+0x1fc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x19e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	@ (8005d14 <HAL_TIM_PWM_Start+0x200>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x19e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <HAL_TIM_PWM_Start+0x204>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x19e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	@ (8005d00 <HAL_TIM_PWM_Start+0x1ec>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x19e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <HAL_TIM_PWM_Start+0x1f0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d115      	bne.n	8005cde <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	4b18      	ldr	r3, [pc, #96]	@ (8005d1c <HAL_TIM_PWM_Start+0x208>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b06      	cmp	r3, #6
 8005cc2:	d015      	beq.n	8005cf0 <HAL_TIM_PWM_Start+0x1dc>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cca:	d011      	beq.n	8005cf0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	e008      	b.n	8005cf0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e000      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	00010007 	.word	0x00010007

08005d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d020      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01b      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0202 	mvn.w	r2, #2
 8005d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fad1 	bl	8006312 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e005      	b.n	8005d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fac3 	bl	80062fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fad4 	bl	8006326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d020      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0204 	mvn.w	r2, #4
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 faab 	bl	8006312 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fa9d 	bl	80062fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 faae 	bl	8006326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d020      	beq.n	8005e1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01b      	beq.n	8005e1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0208 	mvn.w	r2, #8
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2204      	movs	r2, #4
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa85 	bl	8006312 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa77 	bl	80062fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa88 	bl	8006326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d020      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0210 	mvn.w	r2, #16
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa5f 	bl	8006312 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa51 	bl	80062fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa62 	bl	8006326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00c      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0201 	mvn.w	r2, #1
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa2f 	bl	80062ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 ff19 	bl	8006cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00c      	beq.n	8005ede <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 ff11 	bl	8006d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa1c 	bl	800633a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00c      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f06f 0220 	mvn.w	r2, #32
 8005f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fed9 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e0ff      	b.n	800614e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b14      	cmp	r3, #20
 8005f5a:	f200 80f0 	bhi.w	800613e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	0800613f 	.word	0x0800613f
 8005f6c:	0800613f 	.word	0x0800613f
 8005f70:	0800613f 	.word	0x0800613f
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	0800613f 	.word	0x0800613f
 8005f7c:	0800613f 	.word	0x0800613f
 8005f80:	0800613f 	.word	0x0800613f
 8005f84:	0800603b 	.word	0x0800603b
 8005f88:	0800613f 	.word	0x0800613f
 8005f8c:	0800613f 	.word	0x0800613f
 8005f90:	0800613f 	.word	0x0800613f
 8005f94:	0800607b 	.word	0x0800607b
 8005f98:	0800613f 	.word	0x0800613f
 8005f9c:	0800613f 	.word	0x0800613f
 8005fa0:	0800613f 	.word	0x0800613f
 8005fa4:	080060bd 	.word	0x080060bd
 8005fa8:	0800613f 	.word	0x0800613f
 8005fac:	0800613f 	.word	0x0800613f
 8005fb0:	0800613f 	.word	0x0800613f
 8005fb4:	080060fd 	.word	0x080060fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa6c 	bl	800649c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
      break;
 8005ff6:	e0a5      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fadc 	bl	80065bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]
      break;
 8006038:	e084      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fb45 	bl	80066d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0208 	orr.w	r2, r2, #8
 8006054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0204 	bic.w	r2, r2, #4
 8006064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69d9      	ldr	r1, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	61da      	str	r2, [r3, #28]
      break;
 8006078:	e064      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fbad 	bl	80067e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	021a      	lsls	r2, r3, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	61da      	str	r2, [r3, #28]
      break;
 80060ba:	e043      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fbf6 	bl	80068b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060fa:	e023      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc3a 	bl	800697c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800613c:	e002      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_ConfigClockSource+0x1c>
 8006170:	2302      	movs	r3, #2
 8006172:	e0b6      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0x18a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006192:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800619e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b0:	d03e      	beq.n	8006230 <HAL_TIM_ConfigClockSource+0xd8>
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b6:	f200 8087 	bhi.w	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061be:	f000 8086 	beq.w	80062ce <HAL_TIM_ConfigClockSource+0x176>
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c6:	d87f      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061c8:	2b70      	cmp	r3, #112	@ 0x70
 80061ca:	d01a      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0xaa>
 80061cc:	2b70      	cmp	r3, #112	@ 0x70
 80061ce:	d87b      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061d0:	2b60      	cmp	r3, #96	@ 0x60
 80061d2:	d050      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x11e>
 80061d4:	2b60      	cmp	r3, #96	@ 0x60
 80061d6:	d877      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061d8:	2b50      	cmp	r3, #80	@ 0x50
 80061da:	d03c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0xfe>
 80061dc:	2b50      	cmp	r3, #80	@ 0x50
 80061de:	d873      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061e0:	2b40      	cmp	r3, #64	@ 0x40
 80061e2:	d058      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x13e>
 80061e4:	2b40      	cmp	r3, #64	@ 0x40
 80061e6:	d86f      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061e8:	2b30      	cmp	r3, #48	@ 0x30
 80061ea:	d064      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 80061ec:	2b30      	cmp	r3, #48	@ 0x30
 80061ee:	d86b      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d060      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d867      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05c      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d05a      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 8006200:	e062      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006212:	f000 fc93 	bl	8006b3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	609a      	str	r2, [r3, #8]
      break;
 800622e:	e04f      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006240:	f000 fc7c 	bl	8006b3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006252:	609a      	str	r2, [r3, #8]
      break;
 8006254:	e03c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006262:	461a      	mov	r2, r3
 8006264:	f000 fbf0 	bl	8006a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2150      	movs	r1, #80	@ 0x50
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fc49 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 8006274:	e02c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006282:	461a      	mov	r2, r3
 8006284:	f000 fc0f 	bl	8006aa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2160      	movs	r1, #96	@ 0x60
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fc39 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 8006294:	e01c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a2:	461a      	mov	r2, r3
 80062a4:	f000 fbd0 	bl	8006a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2140      	movs	r1, #64	@ 0x40
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fc29 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80062b4:	e00c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fc20 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80062c6:	e003      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	e000      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a46      	ldr	r2, [pc, #280]	@ (800647c <TIM_Base_SetConfig+0x12c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d013      	beq.n	8006390 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636e:	d00f      	beq.n	8006390 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a43      	ldr	r2, [pc, #268]	@ (8006480 <TIM_Base_SetConfig+0x130>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00b      	beq.n	8006390 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a42      	ldr	r2, [pc, #264]	@ (8006484 <TIM_Base_SetConfig+0x134>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a41      	ldr	r2, [pc, #260]	@ (8006488 <TIM_Base_SetConfig+0x138>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a40      	ldr	r2, [pc, #256]	@ (800648c <TIM_Base_SetConfig+0x13c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d108      	bne.n	80063a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a35      	ldr	r2, [pc, #212]	@ (800647c <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01f      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b0:	d01b      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a32      	ldr	r2, [pc, #200]	@ (8006480 <TIM_Base_SetConfig+0x130>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d017      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a31      	ldr	r2, [pc, #196]	@ (8006484 <TIM_Base_SetConfig+0x134>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a30      	ldr	r2, [pc, #192]	@ (8006488 <TIM_Base_SetConfig+0x138>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00f      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2f      	ldr	r2, [pc, #188]	@ (800648c <TIM_Base_SetConfig+0x13c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006490 <TIM_Base_SetConfig+0x140>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006494 <TIM_Base_SetConfig+0x144>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_Base_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006498 <TIM_Base_SetConfig+0x148>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d108      	bne.n	80063fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a16      	ldr	r2, [pc, #88]	@ (800647c <TIM_Base_SetConfig+0x12c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00f      	beq.n	8006448 <TIM_Base_SetConfig+0xf8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a18      	ldr	r2, [pc, #96]	@ (800648c <TIM_Base_SetConfig+0x13c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_Base_SetConfig+0xf8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a17      	ldr	r2, [pc, #92]	@ (8006490 <TIM_Base_SetConfig+0x140>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_Base_SetConfig+0xf8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a16      	ldr	r2, [pc, #88]	@ (8006494 <TIM_Base_SetConfig+0x144>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_Base_SetConfig+0xf8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a15      	ldr	r2, [pc, #84]	@ (8006498 <TIM_Base_SetConfig+0x148>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d103      	bne.n	8006450 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]
  }
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40013400 	.word	0x40013400
 8006490:	40014000 	.word	0x40014000
 8006494:	40014400 	.word	0x40014400
 8006498:	40014800 	.word	0x40014800

0800649c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f023 0201 	bic.w	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 0302 	bic.w	r3, r3, #2
 80064e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a2c      	ldr	r2, [pc, #176]	@ (80065a8 <TIM_OC1_SetConfig+0x10c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00f      	beq.n	800651c <TIM_OC1_SetConfig+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a2b      	ldr	r2, [pc, #172]	@ (80065ac <TIM_OC1_SetConfig+0x110>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_OC1_SetConfig+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a2a      	ldr	r2, [pc, #168]	@ (80065b0 <TIM_OC1_SetConfig+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_OC1_SetConfig+0x80>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a29      	ldr	r2, [pc, #164]	@ (80065b4 <TIM_OC1_SetConfig+0x118>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC1_SetConfig+0x80>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a28      	ldr	r2, [pc, #160]	@ (80065b8 <TIM_OC1_SetConfig+0x11c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10c      	bne.n	8006536 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0308 	bic.w	r3, r3, #8
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1b      	ldr	r2, [pc, #108]	@ (80065a8 <TIM_OC1_SetConfig+0x10c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_OC1_SetConfig+0xc2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1a      	ldr	r2, [pc, #104]	@ (80065ac <TIM_OC1_SetConfig+0x110>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_OC1_SetConfig+0xc2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <TIM_OC1_SetConfig+0x114>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_OC1_SetConfig+0xc2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <TIM_OC1_SetConfig+0x118>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC1_SetConfig+0xc2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a17      	ldr	r2, [pc, #92]	@ (80065b8 <TIM_OC1_SetConfig+0x11c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d111      	bne.n	8006582 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40013400 	.word	0x40013400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800

080065bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a28      	ldr	r2, [pc, #160]	@ (80066bc <TIM_OC2_SetConfig+0x100>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC2_SetConfig+0x6c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a27      	ldr	r2, [pc, #156]	@ (80066c0 <TIM_OC2_SetConfig+0x104>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10d      	bne.n	8006644 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <TIM_OC2_SetConfig+0x100>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_OC2_SetConfig+0xb0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <TIM_OC2_SetConfig+0x104>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_OC2_SetConfig+0xb0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1b      	ldr	r2, [pc, #108]	@ (80066c4 <TIM_OC2_SetConfig+0x108>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_OC2_SetConfig+0xb0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1a      	ldr	r2, [pc, #104]	@ (80066c8 <TIM_OC2_SetConfig+0x10c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC2_SetConfig+0xb0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a19      	ldr	r2, [pc, #100]	@ (80066cc <TIM_OC2_SetConfig+0x110>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d113      	bne.n	8006694 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800667a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40013400 	.word	0x40013400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40014400 	.word	0x40014400
 80066cc:	40014800 	.word	0x40014800

080066d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a27      	ldr	r2, [pc, #156]	@ (80067cc <TIM_OC3_SetConfig+0xfc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_OC3_SetConfig+0x6a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a26      	ldr	r2, [pc, #152]	@ (80067d0 <TIM_OC3_SetConfig+0x100>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d10d      	bne.n	8006756 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <TIM_OC3_SetConfig+0xfc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00f      	beq.n	800677e <TIM_OC3_SetConfig+0xae>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1b      	ldr	r2, [pc, #108]	@ (80067d0 <TIM_OC3_SetConfig+0x100>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_OC3_SetConfig+0xae>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a1a      	ldr	r2, [pc, #104]	@ (80067d4 <TIM_OC3_SetConfig+0x104>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_OC3_SetConfig+0xae>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a19      	ldr	r2, [pc, #100]	@ (80067d8 <TIM_OC3_SetConfig+0x108>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC3_SetConfig+0xae>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <TIM_OC3_SetConfig+0x10c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d113      	bne.n	80067a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800678c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40013400 	.word	0x40013400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800

080067e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800682e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	031b      	lsls	r3, r3, #12
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a18      	ldr	r2, [pc, #96]	@ (80068a0 <TIM_OC4_SetConfig+0xc0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00f      	beq.n	8006864 <TIM_OC4_SetConfig+0x84>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a17      	ldr	r2, [pc, #92]	@ (80068a4 <TIM_OC4_SetConfig+0xc4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00b      	beq.n	8006864 <TIM_OC4_SetConfig+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <TIM_OC4_SetConfig+0xc8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <TIM_OC4_SetConfig+0x84>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a15      	ldr	r2, [pc, #84]	@ (80068ac <TIM_OC4_SetConfig+0xcc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC4_SetConfig+0x84>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a14      	ldr	r2, [pc, #80]	@ (80068b0 <TIM_OC4_SetConfig+0xd0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d109      	bne.n	8006878 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800686a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	019b      	lsls	r3, r3, #6
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40014400 	.word	0x40014400
 80068b0:	40014800 	.word	0x40014800

080068b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a17      	ldr	r2, [pc, #92]	@ (8006968 <TIM_OC5_SetConfig+0xb4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00f      	beq.n	800692e <TIM_OC5_SetConfig+0x7a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a16      	ldr	r2, [pc, #88]	@ (800696c <TIM_OC5_SetConfig+0xb8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00b      	beq.n	800692e <TIM_OC5_SetConfig+0x7a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a15      	ldr	r2, [pc, #84]	@ (8006970 <TIM_OC5_SetConfig+0xbc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d007      	beq.n	800692e <TIM_OC5_SetConfig+0x7a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <TIM_OC5_SetConfig+0xc0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_OC5_SetConfig+0x7a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <TIM_OC5_SetConfig+0xc4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d109      	bne.n	8006942 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006934:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	621a      	str	r2, [r3, #32]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40013400 	.word	0x40013400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	051b      	lsls	r3, r3, #20
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a18      	ldr	r2, [pc, #96]	@ (8006a34 <TIM_OC6_SetConfig+0xb8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00f      	beq.n	80069f8 <TIM_OC6_SetConfig+0x7c>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a17      	ldr	r2, [pc, #92]	@ (8006a38 <TIM_OC6_SetConfig+0xbc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00b      	beq.n	80069f8 <TIM_OC6_SetConfig+0x7c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a16      	ldr	r2, [pc, #88]	@ (8006a3c <TIM_OC6_SetConfig+0xc0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_OC6_SetConfig+0x7c>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a15      	ldr	r2, [pc, #84]	@ (8006a40 <TIM_OC6_SetConfig+0xc4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_OC6_SetConfig+0x7c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a14      	ldr	r2, [pc, #80]	@ (8006a44 <TIM_OC6_SetConfig+0xc8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d109      	bne.n	8006a0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	029b      	lsls	r3, r3, #10
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40013400 	.word	0x40013400
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40014400 	.word	0x40014400
 8006a44:	40014800 	.word	0x40014800

08006a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 030a 	bic.w	r3, r3, #10
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f023 0210 	bic.w	r2, r3, #16
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ae2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f043 0307 	orr.w	r3, r3, #7
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	609a      	str	r2, [r3, #8]
}
 8006b30:	bf00      	nop
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	021a      	lsls	r2, r3, #8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2201      	movs	r2, #1
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e068      	b.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2e      	ldr	r2, [pc, #184]	@ (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d108      	bne.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01d      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c52:	d018      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1a      	ldr	r2, [pc, #104]	@ (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	@ (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a13      	ldr	r2, [pc, #76]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a14      	ldr	r2, [pc, #80]	@ (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d10c      	bne.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40014000 	.word	0x40014000

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e040      	b.n	8006da8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fa fe4a 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2224      	movs	r2, #36	@ 0x24
 8006d40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0201 	bic.w	r2, r2, #1
 8006d50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fae0 	bl	8007320 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f825 	bl	8006db0 <UART_SetConfig>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e01b      	b.n	8006da8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb5f 	bl	8007464 <UART_CheckIdleState>
 8006da6:	4603      	mov	r3, r0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db4:	b08a      	sub	sp, #40	@ 0x28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4ba4      	ldr	r3, [pc, #656]	@ (8007070 <UART_SetConfig+0x2c0>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a99      	ldr	r2, [pc, #612]	@ (8007074 <UART_SetConfig+0x2c4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a90      	ldr	r2, [pc, #576]	@ (8007078 <UART_SetConfig+0x2c8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d126      	bne.n	8006e88 <UART_SetConfig+0xd8>
 8006e3a:	4b90      	ldr	r3, [pc, #576]	@ (800707c <UART_SetConfig+0x2cc>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d81b      	bhi.n	8006e80 <UART_SetConfig+0xd0>
 8006e48:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0xa0>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e66:	e116      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e112      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e10e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e10a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e106      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a7c      	ldr	r2, [pc, #496]	@ (8007080 <UART_SetConfig+0x2d0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d138      	bne.n	8006f04 <UART_SetConfig+0x154>
 8006e92:	4b7a      	ldr	r3, [pc, #488]	@ (800707c <UART_SetConfig+0x2cc>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d82d      	bhi.n	8006efc <UART_SetConfig+0x14c>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <UART_SetConfig+0xf8>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e0d8      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e0d4      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e0d0      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e0cc      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e0c8      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a5e      	ldr	r2, [pc, #376]	@ (8007084 <UART_SetConfig+0x2d4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d125      	bne.n	8006f5a <UART_SetConfig+0x1aa>
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800707c <UART_SetConfig+0x2cc>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f18:	2b30      	cmp	r3, #48	@ 0x30
 8006f1a:	d016      	beq.n	8006f4a <UART_SetConfig+0x19a>
 8006f1c:	2b30      	cmp	r3, #48	@ 0x30
 8006f1e:	d818      	bhi.n	8006f52 <UART_SetConfig+0x1a2>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d00a      	beq.n	8006f3a <UART_SetConfig+0x18a>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d814      	bhi.n	8006f52 <UART_SetConfig+0x1a2>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <UART_SetConfig+0x182>
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d008      	beq.n	8006f42 <UART_SetConfig+0x192>
 8006f30:	e00f      	b.n	8006f52 <UART_SetConfig+0x1a2>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f38:	e0ad      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f40:	e0a9      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f42:	2304      	movs	r3, #4
 8006f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f48:	e0a5      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f50:	e0a1      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f52:	2310      	movs	r3, #16
 8006f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f58:	e09d      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8007088 <UART_SetConfig+0x2d8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d125      	bne.n	8006fb0 <UART_SetConfig+0x200>
 8006f64:	4b45      	ldr	r3, [pc, #276]	@ (800707c <UART_SetConfig+0x2cc>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f70:	d016      	beq.n	8006fa0 <UART_SetConfig+0x1f0>
 8006f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f74:	d818      	bhi.n	8006fa8 <UART_SetConfig+0x1f8>
 8006f76:	2b80      	cmp	r3, #128	@ 0x80
 8006f78:	d00a      	beq.n	8006f90 <UART_SetConfig+0x1e0>
 8006f7a:	2b80      	cmp	r3, #128	@ 0x80
 8006f7c:	d814      	bhi.n	8006fa8 <UART_SetConfig+0x1f8>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <UART_SetConfig+0x1d8>
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d008      	beq.n	8006f98 <UART_SetConfig+0x1e8>
 8006f86:	e00f      	b.n	8006fa8 <UART_SetConfig+0x1f8>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8e:	e082      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f90:	2302      	movs	r3, #2
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f96:	e07e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f9e:	e07a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fa6:	e076      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fae:	e072      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a35      	ldr	r2, [pc, #212]	@ (800708c <UART_SetConfig+0x2dc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d12a      	bne.n	8007010 <UART_SetConfig+0x260>
 8006fba:	4b30      	ldr	r3, [pc, #192]	@ (800707c <UART_SetConfig+0x2cc>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc8:	d01a      	beq.n	8007000 <UART_SetConfig+0x250>
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fce:	d81b      	bhi.n	8007008 <UART_SetConfig+0x258>
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd4:	d00c      	beq.n	8006ff0 <UART_SetConfig+0x240>
 8006fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fda:	d815      	bhi.n	8007008 <UART_SetConfig+0x258>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <UART_SetConfig+0x238>
 8006fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe4:	d008      	beq.n	8006ff8 <UART_SetConfig+0x248>
 8006fe6:	e00f      	b.n	8007008 <UART_SetConfig+0x258>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fee:	e052      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff6:	e04e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffe:	e04a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007000:	2308      	movs	r3, #8
 8007002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007006:	e046      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007008:	2310      	movs	r3, #16
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700e:	e042      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a17      	ldr	r2, [pc, #92]	@ (8007074 <UART_SetConfig+0x2c4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d13a      	bne.n	8007090 <UART_SetConfig+0x2e0>
 800701a:	4b18      	ldr	r3, [pc, #96]	@ (800707c <UART_SetConfig+0x2cc>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007024:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007028:	d01a      	beq.n	8007060 <UART_SetConfig+0x2b0>
 800702a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800702e:	d81b      	bhi.n	8007068 <UART_SetConfig+0x2b8>
 8007030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007034:	d00c      	beq.n	8007050 <UART_SetConfig+0x2a0>
 8007036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800703a:	d815      	bhi.n	8007068 <UART_SetConfig+0x2b8>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <UART_SetConfig+0x298>
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007044:	d008      	beq.n	8007058 <UART_SetConfig+0x2a8>
 8007046:	e00f      	b.n	8007068 <UART_SetConfig+0x2b8>
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704e:	e022      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007050:	2302      	movs	r3, #2
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007056:	e01e      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007058:	2304      	movs	r3, #4
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705e:	e01a      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007060:	2308      	movs	r3, #8
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007066:	e016      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007068:	2310      	movs	r3, #16
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706e:	e012      	b.n	8007096 <UART_SetConfig+0x2e6>
 8007070:	efff69f3 	.word	0xefff69f3
 8007074:	40008000 	.word	0x40008000
 8007078:	40013800 	.word	0x40013800
 800707c:	40021000 	.word	0x40021000
 8007080:	40004400 	.word	0x40004400
 8007084:	40004800 	.word	0x40004800
 8007088:	40004c00 	.word	0x40004c00
 800708c:	40005000 	.word	0x40005000
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a9f      	ldr	r2, [pc, #636]	@ (8007318 <UART_SetConfig+0x568>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d17a      	bne.n	8007196 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d824      	bhi.n	80070f2 <UART_SetConfig+0x342>
 80070a8:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <UART_SetConfig+0x300>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070f3 	.word	0x080070f3
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070f3 	.word	0x080070f3
 80070c0:	080070e3 	.word	0x080070e3
 80070c4:	080070f3 	.word	0x080070f3
 80070c8:	080070f3 	.word	0x080070f3
 80070cc:	080070f3 	.word	0x080070f3
 80070d0:	080070eb 	.word	0x080070eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fd febe 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 80070d8:	61f8      	str	r0, [r7, #28]
        break;
 80070da:	e010      	b.n	80070fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070dc:	4b8f      	ldr	r3, [pc, #572]	@ (800731c <UART_SetConfig+0x56c>)
 80070de:	61fb      	str	r3, [r7, #28]
        break;
 80070e0:	e00d      	b.n	80070fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e2:	f7fd fe1f 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80070e6:	61f8      	str	r0, [r7, #28]
        break;
 80070e8:	e009      	b.n	80070fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ee:	61fb      	str	r3, [r7, #28]
        break;
 80070f0:	e005      	b.n	80070fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80fb 	beq.w	80072fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4413      	add	r3, r2
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	429a      	cmp	r2, r3
 8007114:	d305      	bcc.n	8007122 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	429a      	cmp	r2, r3
 8007120:	d903      	bls.n	800712a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007128:	e0e8      	b.n	80072fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2200      	movs	r2, #0
 800712e:	461c      	mov	r4, r3
 8007130:	4615      	mov	r5, r2
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	022b      	lsls	r3, r5, #8
 800713c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007140:	0222      	lsls	r2, r4, #8
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	6849      	ldr	r1, [r1, #4]
 8007146:	0849      	lsrs	r1, r1, #1
 8007148:	2000      	movs	r0, #0
 800714a:	4688      	mov	r8, r1
 800714c:	4681      	mov	r9, r0
 800714e:	eb12 0a08 	adds.w	sl, r2, r8
 8007152:	eb43 0b09 	adc.w	fp, r3, r9
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007164:	4650      	mov	r0, sl
 8007166:	4659      	mov	r1, fp
 8007168:	f7f9 fc1c 	bl	80009a4 <__aeabi_uldivmod>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4613      	mov	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800717a:	d308      	bcc.n	800718e <UART_SetConfig+0x3de>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007182:	d204      	bcs.n	800718e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	60da      	str	r2, [r3, #12]
 800718c:	e0b6      	b.n	80072fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007194:	e0b2      	b.n	80072fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800719e:	d15e      	bne.n	800725e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d828      	bhi.n	80071fa <UART_SetConfig+0x44a>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0x400>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	080071fb 	.word	0x080071fb
 80071c0:	080071eb 	.word	0x080071eb
 80071c4:	080071fb 	.word	0x080071fb
 80071c8:	080071fb 	.word	0x080071fb
 80071cc:	080071fb 	.word	0x080071fb
 80071d0:	080071f3 	.word	0x080071f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d4:	f7fd fe3e 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 80071d8:	61f8      	str	r0, [r7, #28]
        break;
 80071da:	e014      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071dc:	f7fd fe50 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 80071e0:	61f8      	str	r0, [r7, #28]
        break;
 80071e2:	e010      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e4:	4b4d      	ldr	r3, [pc, #308]	@ (800731c <UART_SetConfig+0x56c>)
 80071e6:	61fb      	str	r3, [r7, #28]
        break;
 80071e8:	e00d      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ea:	f7fd fd9b 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80071ee:	61f8      	str	r0, [r7, #28]
        break;
 80071f0:	e009      	b.n	8007206 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f6:	61fb      	str	r3, [r7, #28]
        break;
 80071f8:	e005      	b.n	8007206 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d077      	beq.n	80072fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	005a      	lsls	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	441a      	add	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b0f      	cmp	r3, #15
 8007226:	d916      	bls.n	8007256 <UART_SetConfig+0x4a6>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722e:	d212      	bcs.n	8007256 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f023 030f 	bic.w	r3, r3, #15
 8007238:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	b29b      	uxth	r3, r3
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	b29a      	uxth	r2, r3
 8007246:	8afb      	ldrh	r3, [r7, #22]
 8007248:	4313      	orrs	r3, r2
 800724a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	8afa      	ldrh	r2, [r7, #22]
 8007252:	60da      	str	r2, [r3, #12]
 8007254:	e052      	b.n	80072fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800725c:	e04e      	b.n	80072fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800725e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007262:	2b08      	cmp	r3, #8
 8007264:	d827      	bhi.n	80072b6 <UART_SetConfig+0x506>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <UART_SetConfig+0x4bc>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007291 	.word	0x08007291
 8007270:	08007299 	.word	0x08007299
 8007274:	080072a1 	.word	0x080072a1
 8007278:	080072b7 	.word	0x080072b7
 800727c:	080072a7 	.word	0x080072a7
 8007280:	080072b7 	.word	0x080072b7
 8007284:	080072b7 	.word	0x080072b7
 8007288:	080072b7 	.word	0x080072b7
 800728c:	080072af 	.word	0x080072af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007290:	f7fd fde0 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8007294:	61f8      	str	r0, [r7, #28]
        break;
 8007296:	e014      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fd fdf2 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 800729c:	61f8      	str	r0, [r7, #28]
        break;
 800729e:	e010      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	@ (800731c <UART_SetConfig+0x56c>)
 80072a2:	61fb      	str	r3, [r7, #28]
        break;
 80072a4:	e00d      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072a6:	f7fd fd3d 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80072aa:	61f8      	str	r0, [r7, #28]
        break;
 80072ac:	e009      	b.n	80072c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b2:	61fb      	str	r3, [r7, #28]
        break;
 80072b4:	e005      	b.n	80072c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072c0:	bf00      	nop
    }

    if (pclk != 0U)
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d019      	beq.n	80072fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	085a      	lsrs	r2, r3, #1
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	441a      	add	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	d909      	bls.n	80072f6 <UART_SetConfig+0x546>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e8:	d205      	bcs.n	80072f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	e002      	b.n	80072fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007308:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800730c:	4618      	mov	r0, r3
 800730e:	3728      	adds	r7, #40	@ 0x28
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40008000 	.word	0x40008000
 800731c:	00f42400 	.word	0x00f42400

08007320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800741e:	d10a      	bne.n	8007436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b098      	sub	sp, #96	@ 0x60
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7fa fc00 	bl	8001c78 <HAL_GetTick>
 8007478:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d12e      	bne.n	80074e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007488:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007490:	2200      	movs	r2, #0
 8007492:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f88c 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d021      	beq.n	80074e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e062      	b.n	80075ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d149      	bne.n	8007588 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f856 	bl	80075b4 <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03c      	beq.n	8007588 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	623b      	str	r3, [r7, #32]
   return(result);
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752c:	633b      	str	r3, [r7, #48]	@ 0x30
 800752e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007560:	61fa      	str	r2, [r7, #28]
 8007562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	69b9      	ldr	r1, [r7, #24]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	617b      	str	r3, [r7, #20]
   return(result);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e5      	bne.n	8007540 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e011      	b.n	80075ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3758      	adds	r7, #88	@ 0x58
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c4:	e04f      	b.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d04b      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ce:	f7fa fb53 	bl	8001c78 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e04e      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d037      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b80      	cmp	r3, #128	@ 0x80
 80075fa:	d034      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	d031      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b08      	cmp	r3, #8
 800760e:	d110      	bne.n	8007632 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2208      	movs	r2, #8
 8007616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f838 	bl	800768e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2208      	movs	r2, #8
 8007622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e029      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007640:	d111      	bne.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800764a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f81e 	bl	800768e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e00f      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4013      	ands	r3, r2
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	429a      	cmp	r2, r3
 8007674:	bf0c      	ite	eq
 8007676:	2301      	moveq	r3, #1
 8007678:	2300      	movne	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	429a      	cmp	r2, r3
 8007682:	d0a0      	beq.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800768e:	b480      	push	{r7}
 8007690:	b095      	sub	sp, #84	@ 0x54
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e6      	bne.n	8007696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f0:	e841 2300 	strex	r3, r2, [r1]
 80076f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e5      	bne.n	80076c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007700:	2b01      	cmp	r3, #1
 8007702:	d118      	bne.n	8007736 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	60bb      	str	r3, [r7, #8]
   return(result);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f023 0310 	bic.w	r3, r3, #16
 8007718:	647b      	str	r3, [r7, #68]	@ 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6979      	ldr	r1, [r7, #20]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	613b      	str	r3, [r7, #16]
   return(result);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e6      	bne.n	8007704 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800774a:	bf00      	nop
 800774c:	3754      	adds	r7, #84	@ 0x54
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <memset>:
 8007756:	4402      	add	r2, r0
 8007758:	4603      	mov	r3, r0
 800775a:	4293      	cmp	r3, r2
 800775c:	d100      	bne.n	8007760 <memset+0xa>
 800775e:	4770      	bx	lr
 8007760:	f803 1b01 	strb.w	r1, [r3], #1
 8007764:	e7f9      	b.n	800775a <memset+0x4>
	...

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	@ (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	@ (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	@ (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	@ (80077ac <__libc_init_array+0x44>)
 800777c:	f000 f818 	bl	80077b0 <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	08007818 	.word	0x08007818
 80077a4:	08007818 	.word	0x08007818
 80077a8:	08007818 	.word	0x08007818
 80077ac:	0800781c 	.word	0x0800781c

080077b0 <_init>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr

080077bc <_fini>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr
